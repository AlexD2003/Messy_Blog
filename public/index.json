[{"categories":["Overthewire","Bandit"],"contents":"Level goal The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL/TLS and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it. Helpful note: Getting “DONE”, “RENEGOTIATING” or “KEYUPDATE”? Read the “CONNECTED COMMANDS” section in the manpage.\nLogin ssh bandit16@bandit.labs.overthewire.org -p 2220\nkSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx\nDoc nmap (1) - Network exploration tool and security / port scanner SERVICE/VERSION DETECTION: -sV: Probe open ports to determine service/version info --version-intensity \u0026lt;level\u0026gt;: Set from 0 (light) to 9 (try all probes) --version-light: Limit to most likely probes (intensity 2) --version-all: Try every single probe (intensity 9) --version-trace: Show detailed version scan activity (for debugging) What is nmap (u`ll use it again) Nmap (\u0026ldquo;Network Mapper\u0026rdquo;) is a free and open source utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It was designed to rapidly scan large networks, but works fine against single hosts. Source\nSolution We can use nmap in order to scan certain aspects of a network w.r.t. our needs. Sice the level goal states that the password is nested on localhost on a port in range 31000-32000 we should scan the range of ports with a flag to sort them based on the service running on each port. (-sV, see doc)\nScan phase (may take a while) bandit16@bandit:~$ nmap -sV localhost -p31000-32000 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-18 14:05 UTC Nmap scan report for localhost (127.0.0.1) Host is up (0.00014s latency). Not shown: 996 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 31046/tcp open echo 31518/tcp open ssl/echo 31691/tcp open echo 31790/tcp open ssl/unknown 31960/tcp open echo . . . Connect As we could see previously, there are 5 open ports in the range out of which, only 2 use SSL encryption. Now we use openssl just like in the previous level for the ports 31518,31790.\nNote. If at the time of you doing this your key starts with k like mine, try using -quiet in order to not KEYUPDATE. bandit16@bandit:~$ openssl s_client -connect localhost:31790 -quiet Can\u0026#39;t use SSL_get_servername depth=0 CN = SnakeOil verify error:num=18:self-signed certificate verify return:1 depth=0 CN = SnakeOil verify return:1 kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx Correct! -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama +TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT 8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM 77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3 vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY= -----END RSA PRIVATE KEY-----\nConnect to bandit 17 You can see that the ouput after inserting the correct key was a private key. Copy that key into somefile.private and connect to bandit17 as you normally would but also add the flag -i in combination with the file where you copied the private key.\n","date":"2024-08-18T16:56:29+03:00","permalink":"//localhost:1313/post/bandit16/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 16"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL/TLS encryption. Helpful note: Getting “DONE”, “RENEGOTIATING” or “KEYUPDATE”? Read the “CONNECTED COMMANDS” section in the manpage.\nLogin ssh bandit15@bandit.labs.overthewire.org -p 2220\n263JGJPfgU6LtdEvgfWU1XP5yac29mFx\nDoc openssl (1ssl) - OpenSSL command line program man openssl - for all the use cases and flags Solution The only difference between this level and the previous one is the fact that the medium is using SSL\\TLS encryption. We can achieve that by connecting through openssl and then posting the current level`s password. bandit15@bandit:~$ openssl s_client -connect localhost:30001 CONNECTED(00000003) Can\u0026#39;t use SSL_get_servername depth=0 CN = SnakeOil verify error:num=18:self-signed certificate verify return:1 depth=0 CN = SnakeOil verify return:1 --- . . . read R BLOCK 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo Correct! kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx --flag\n","date":"2024-08-18T16:40:00+03:00","permalink":"//localhost:1313/post/bandit15/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 15"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.\nLogin ssh bandit14@bandit.labs.overthewire.org -p 2220\nMU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS\nDoc nc (1) - arbitrary TCP and UDP connections and listens usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s sourceaddr] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]] [destination] [port] Solution The sollution for this level is pretty straight forward, just transmit the current password to localhost on port 30000 using netcat nc. bandit14@bandit:~$ nc localhost 30000 MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS Correct! 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo\n","date":"2024-08-18T16:34:58+03:00","permalink":"//localhost:1313/post/bandit14/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 14"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on.\nLogin ssh bandit13@bandit.labs.overthewire.org -p 2220\nFO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\nDoc ssh (1) - OpenSSH remote login client usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J destination] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-P tag] [-p port] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command [argument ...]] ssh [-Q query_option] A bit of backstory An SSH key is a secure access credential used in the Secure Shell (SSH) protocol. SSH key pairs use public key infrastructure (PKI) technology, the gold standard for digital identity authentication and encryption, to provide a secure and scalable method of authentication. Source\nSolution By using ls, you can see that there`s a file named sshkey.private. Since it is stated that only bandit14 has access to the flag stored in /etc/bandit_pass/bandit14 our approach should be making our request as bandit14. When sshing you can use a key as your login method instead of the text password we were used to until now by specifing the -i flag. bandit13@bandit:~$ ls sshkey.private Since bandit13, the endpoint we are also on, is hosted on bandit.labs.overthewire.org, we can simply specify localhost as the host and use ssh in pair with the key to connect and then just cat the respective file. bandit13@bandit:~$ ls sshkey.private bandit13@bandit:~$ ssh -i sshkey.private bandit14@localhost -p 2220 The authenticity of host \u0026#39;[localhost]:2220 ([127.0.0.1]:2220)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:C2ihUBV7ihnV1wUXRb4RrEcLfXC5CXlhmAAM/urerLY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Could not create directory \u0026#39;/home/bandit13/.ssh\u0026#39; (Permission denied). Failed to add the host to the list of known hosts (/home/bandit13/.ssh/known_hosts). _ _ _ _ | |__ __ _ _ __ __| (_) |_ | \u0026#39;_ \\ / _` | \u0026#39;_ \\ / _` | | __| | |_) | (_| | | | | (_| | | |_ |_.__/ \\__,_|_| |_|\\__,_|_|\\__| This is an OverTheWire game server. More information on http://www.overthewire.org/wargames !!! You are trying to log into this SSH server with a password on port 2220 from localhost. !!! Connecting from localhost is blocked to conserve resources. !!! Please log out and log in again. ,----.. ,----, .---. / / \\ ,/ .`| /. ./| / . : ,` .\u0026#39; : .--\u0026#39;. \u0026#39; ; . / ;. \\ ; ; / /__./ \\ : | . ; / ` ; .\u0026#39;___,/ ,\u0026#39; .--\u0026#39;. \u0026#39; \\\u0026#39; . ; | ; \\ ; | | : | /___/ \\ | \u0026#39; \u0026#39; | : | ; | \u0026#39; ; |.\u0026#39;; ; ; \\ \\; : . | \u0026#39; \u0026#39; \u0026#39; : `----\u0026#39; | | \\ ; ` | \u0026#39; ; \\; / | \u0026#39; : ; . \\ .\\ ; \\ \\ \u0026#39;, / | | \u0026#39; \\ \\ \u0026#39; \\ | ; : / \u0026#39; : | : \u0026#39; |--\u0026#34; \\ \\ .\u0026#39; ; |.\u0026#39; \\ \\ ; www. `---` ver \u0026#39;---\u0026#39; he \u0026#39;---\u0026#34; ire.org Welcome to OverTheWire! .... Enjoy your stay! bandit14@bandit:~$ cat /etc/bandit_pass/bandit14 MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS\n","date":"2024-08-18T15:18:52+03:00","permalink":"//localhost:1313/post/bandit13/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 13"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work. Use mkdir with a hard to guess directory name. Or better, use the command “mktemp -d”. Then copy the datafile using cp, and rename it using mv (read the manpages!).\nLogin ssh bandit12@bandit.labs.overthewire.org -p 2220\n7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4\nDoc file (1) - determine file type tar (1) - an archiving utility gzip (1) - compress or expand files bzip2 (1) - a block-sorting file compressor, v1.0.8 xxd (1) - make a hex dump or do the reverse. Solution The solution for this level is pretty long and tedious. It`s all about understanding how files are compressed, how to see what a random file in memory actually is and how to get the data behind it.\nStep 1. Using mktemp -d you can create a temporary directory in the /tmp path in order to process certain files or create stuff where you otherwise wouldn`t have permissions to do so. We will move the initial data.txt to our new directory and use xxd since we know from the start it is a hexdump. bandit12@bandit:~$ ls data.txt bandit12@bandit:~$ mktemp -d /tmp/tmp.esFHBLf5iQ bandit12@bandit:~$ cp data.txt /tmp/tmp.esFHBLf5iQ/data.txt bandit12@bandit:~$ cd /tmp/tmp.esFHBLf5iQ bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ cat data.txt | xxd -r \u0026gt; data\nStep 2. After every decompression, it is important to check what type of data we have on our hands using file and apply the appropriate tools until we get to something human readable.\nbandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: gzip compressed data, was \u0026#34;data2.bin\u0026#34;, last modified: Wed Jul 17 15:57:06 2024, max compression, from Unix, original size modulo 2^32 577 bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data.gz data.txt bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.txt bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ gzip -d data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: bzip2 compressed data, block size = 900k bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ bzip2 -d data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: gzip compressed data, was \u0026#34;data4.bin\u0026#34;, last modified: Wed Jul 17 15:57:06 2024, max compression, from Unix, original size modulo 2^32 20480 bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ gzip -d data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: POSIX tar archive (GNU) bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ tar -xf data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data5.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data5.bin data5.bin: POSIX tar archive (GNU) bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data5.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ tar -xf data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data6.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data6.bin data6.bin: bzip2 compressed data, block size = 900k bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data6.bin data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ bzip2 -d data.bz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: POSIX tar archive (GNU) bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ tar -xf data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data8.bin data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ rm data.tar bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data8.bin data8.bin: gzip compressed data, was \u0026#34;data9.bin\u0026#34;, last modified: Wed Jul 17 15:57:06 2024, max compression, from Unix, original size modulo 2^32 49 bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ mv data8.bin data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ gzip -d data.gz bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ ls data bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ file data data: ASCII text Step 3. Wrapping up We can see that we`ve hit an ASCII file. Now using cat, the output of the file should be the flag. bandit12@bandit:/tmp/tmp.esFHBLf5iQ$ cat data The password is FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\n","date":"2024-08-18T14:22:07+03:00","permalink":"//localhost:1313/post/bandit12/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 12"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions.\nLogin ssh bandit11bandit.labs.overthewire.org -p 2220\ndtR173fZKb0RRsDFSGsg2RWnpNVj3qRr\nSources Ascii code\nDoc cat (1) - concatenate files and print on the standard output Solution By using cat we get the contents of the single file present in the directory. We can see that the present data makes up a string. By simply rotating every character in this string ascendingly by the value 13 we could in theory get the correct answer. I`ve copied the output from data.txt into my own terminal, made a c++ program that increases each element in a character array by 13 and then print out the answer. bandit11@bandit:~$ ls data.txt bandit11@bandit:~$ cat data.txt Gur cnffjbeq vf 7k16JArUVv5LxVuJfsSVdbbtaHGlw9D4\nC++ code and compilation #include \u0026lt;iostream\u0026gt; using namespace std; //Gur cnffjbeq vf 7k16JArUVv5LxVuJfsSVdbbtaHGlw9D4 //rot by 13 char v[100] = {\u0026#39;G\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;4\u0026#39;}; int main() { for (int i = 0; i \u0026lt; 48; i++) { if (v[i] \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; v[i] \u0026lt;= \u0026#39;Z\u0026#39;) { v[i] = (v[i] - \u0026#39;A\u0026#39; + 13) % 26 + \u0026#39;A\u0026#39;; } else if (v[i] \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; v[i] \u0026lt;= \u0026#39;z\u0026#39;) { v[i] = (v[i] - \u0026#39;a\u0026#39; + 13) % 26 + \u0026#39;a\u0026#39;; } } for (int i = 0; i \u0026lt; 48; i++) { cout \u0026lt;\u0026lt; v[i]; } return 0; } 02:09:33 archie@Archie c++ → g++ decrypt.cpp -o out 02:10:29 archie@Archie c++ → ./out The password is 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4 ","date":"2024-08-17T22:42:32+03:00","permalink":"//localhost:1313/post/bandit11/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 11"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt, which contains base64 encoded data.\nLogin ssh bandit10@bandit.labs.overthewire.org -p 2220\nFGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey\nDoc base64 (1) - base64 encode/decode data and print to standard output -d, --decode decode data Solution Use the -d flag (decode) on the data.txt file by using the base64 command. bandit10@bandit:~$ base64 -d data.txt The password is dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr\n","date":"2024-08-17T22:35:17+03:00","permalink":"//localhost:1313/post/bandit10/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 10"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.\nLogin ssh bandit9@bandit.labs.overthewire.org -p 2220\n4CKMh1JI91bUIZZPXDqGanal4xvAg0JM\nDoc strings (1) - print the sequences of printable characters in files grep (1) - print lines that match patterns Solution Use strings to only recieve the string values out of the text file, pipe it to grep using \u0026ldquo;=\u0026rdquo; as the pattern you are searching for. bandit9@bandit:~$ strings data.txt | grep = =aA\u0026#34;f \\a!;========== the PWAF=1 M),\\}= 2Y6= G\u0026#39;;?e= ========== passwordf ========== isc *=N6 m=\u0026lt;/ E=Bty =sw\t\u0026#34;M1= ========== FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey !\u0026amp;=u\u0026amp;4$ *XA=\n","date":"2024-08-17T22:25:00+03:00","permalink":"//localhost:1313/post/bandit9/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 9"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt and is the only line of text that occurs only once.\nLogin ssh bandit8@bandit.labs.overthewire.org -p 2220\ndfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc\nDoc sort (1) - sort lines of text files uniq (1) - report or omit repeated lines -c, --count prefix lines by the number of occurrences -u, --unique only print unique lines | -pipe operator Solution We pipe the ouput of sort (in order to get the identical lines one after the other) and pipe the output to unique using the flags -c (counting just to make sure) and -u(unique) bandit8@bandit:~$ sort data.txt | uniq -cu 1 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM\n","date":"2024-08-17T21:57:43+03:00","permalink":"//localhost:1313/post/bandit8/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 8"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the file data.txt next to the word millionth\nLogin ssh bandit7@bandit.labs.overthewire.org -p 2220\nmorbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\nDoc cat (1) - concatenate files and print on the standard output grep (1) - print lines that match patterns Solution We can use cat to get the contents of the file in question, feed it to grep using a pipe | with the argument of millionth in order for it to spit out the line where the pattern matches. bandit7@bandit:~$ cat data.txt | grep millionth millionth\tdfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc\n","date":"2024-08-17T18:16:02+03:00","permalink":"//localhost:1313/post/bandit7/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 7"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored somewhere on the server and has all of the following properties:\n-owned by user bandit7\n-owned by group bandit6\n-33 bytes in size\nLogin ssh bandit6@bandit.labs.overthewire.org -p 2220\nHWasnPhtq9AVKe0dmk45nxy20cvUa6EG\nDoc find (1) - search for files in a directory hierarchy Solution Firstly, I searched the home directory since its smaller than the root in case the file was hidden there. After seeing that it was not, I used find in root / to see that there exists a file with my defined conditions at /var/lib/dpkg/info/bandit7.password. bandit6@bandit:~$ find /home -user bandit7 -group bandit6 -size 33c find: ‘/home/drifter8/chroot’: Permission denied find: ‘/home/bandit5/inhere’: Permission denied find: ‘/home/bandit31-git’: Permission denied find: ‘/home/bandit29-git’: Permission denied find: ‘/home/ubuntu’: Permission denied find: ‘/home/bandit30-git’: Permission denied find: ‘/home/bandit28-git’: Permission denied find: ‘/home/drifter6/data’: Permission denied find: ‘/home/bandit27-git’: Permission denied bandit6@bandit:~$ find / -user bandit7 -group bandit6 -size 33c find: ‘/sys/kernel/tracing’: Permission denied find: ‘/sys/kernel/debug’: Permission denied . . . /var/lib/dpkg/info/bandit7.password . . . bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\n","date":"2024-08-16T17:07:33+03:00","permalink":"//localhost:1313/post/bandit6/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 6"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:\n-human-readable\n-1033 bytes in size\n-not executable\nLogin ssh bandit5@bandit.labs.overthewire.org -p 2220\n4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw\nDoc find (1) - search for files in a directory hierarchy Solution Make use of the find command to search by size and you can see that there`s only 1 file that matches. Even if there were other files, a simple ls -la would check the other conditions. bandit5@bandit:~/inhere$ find -size 1033c ./maybehere07/.file2 bandit5@bandit:~/inhere$ cd ./maybehere07/ bandit5@bandit:~/inhere/maybehere07$ cat .file2 HWasnPhtq9AVKe0dmk45nxy20cvUa6EG\n","date":"2024-08-15T17:07:30+03:00","permalink":"//localhost:1313/post/bandit5/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 5"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.\nLogin ssh bandit4@bandit.labs.overthewire.org -p 2220\n2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ\nDoc cat (1) - concatenate files and print on the standard output Solution Cat files using operator until flag is found. bandit4@bandit:~/inhere$ cat \u0026lt; -file00 ,Yq�fL����x4Fbandit4@bandit:~/inhere$ cat \u0026lt; -file01 N�bandit4@bandit:~/inhere$ cat \u0026lt; -file02 9�F�p��tk%bandit4@bandit:~/inhere$ cat \u0026lt; -file03 nQy��͍{+R�ZkF*\tbandit4@bandit:~/inhere$ cat \u0026lt; -file04 l�]�߯-@gQ÷wzP�ybandit4@bandit:~/inhere$ cat \u0026lt; -file05 �ӻT9��3ˤ�� T՜F�bandit4@bandit:~/inhere$ cat \u0026lt; -file06 �QĹM�p4-��!#g�[?2004hbandit4@bandit:~/inhere$ cat \u0026lt; -file07 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw\n","date":"2024-08-14T17:07:27+03:00","permalink":"//localhost:1313/post/bandit4/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 4"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a hidden file in the inhere directory.\nLogin ssh bandit3@bandit.labs.overthewire.org -p 2220\nMNk8KNH3Usiio41PRUEoDFPqfxLPlSmx\nDoc man (1) - an interface to the system reference manuals usefull ls flags: -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. Solution Use ls -a in order to see files precedented by .`s and navigate to the file then cat the file for the flag. bandit3@bandit:~$ ls inhere bandit3@bandit:~$ cd inhere/ bandit3@bandit:~/inhere$ ls bandit3@bandit:~/inhere$ ls -a . .. ...Hiding-From-You bandit3@bandit:~/inhere$ cat ...Hiding-From-You 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ\n","date":"2024-08-13T00:23:19+03:00","permalink":"//localhost:1313/post/bandit3/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 3"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file called spaces in this filename located in the home directory.\nLogin ssh bandit2@bandit.labs.overthewire.org -p 2220\n263JGJPfgU6LtdEvgfWU1XP5yac29mFx\nDoc ls (1) - list directory contents cat (1) - concatenate files and print on the standard output Solution Simply use \u0026quot; \u0026quot; on the file in order to parse the parameter as a string, then get the result using cat. bandit2@bandit:~$ ls spaces in this filename bandit2@bandit:~$ cat \u0026#34;spaces in this filename\u0026#34; MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx\n","date":"2024-08-13T00:22:19+03:00","permalink":"//localhost:1313/post/amodel-bandit2/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 2"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file called \u0026quot;-\u0026quot; located in the home directory\nLogin ssh bandit1@bandit.labs.overthewire.org -p 2220\nZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\nDoc cat (1) - concatenate files and print on the standard output Solution Using the redirecting operator \u0026lt; when can feed \u0026quot;-\u0026quot; to cat in order to see the contents of the file. bandit1@bandit:~$ cat \u0026lt; - 263JGJPfgU6LtdEvgfWU1XP5yac29mFx\n","date":"2024-08-12T00:23:19+03:00","permalink":"//localhost:1313/post/bandit1/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 1"},{"categories":["Overthewire","Bandit"],"contents":"Level goal The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.\nNote! For all bandit level logins, the default route is using ssh. Format: ssh bandit(level)@bandit.labs.overthewire.org -p 2220\nLogin ssh bandit0@bandit.labs.overthewire.org -p 2220\nbandit0\nDoc ls (1) - list directory contents cat (1) - concatenate files and print on the standard output Solution Use \u0026ldquo;ls\u0026rdquo; to list the files in the current directory and then \u0026ldquo;cat\u0026rdquo; to print the contents of readme. bandit0@bandit:~$ ls readme bandit0@bandit:~$ cat readme The password you are looking for is: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\n","date":"2024-08-11T00:23:19+03:00","permalink":"//localhost:1313/post/bandit0/","section":"post","tags":["CTF","Completed"],"title":"Bandit-Level 0"}]