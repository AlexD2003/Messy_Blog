<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PicoCTF on My messy collection</title>
    <link>//localhost:1313/categories/picoctf/</link>
    <description>Recent content in PicoCTF on My messy collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>Copyright © 2008–2019</copyright>
    <lastBuildDate>Thu, 24 Oct 2024 12:52:41 +0300</lastBuildDate>
    
	<atom:link href="//localhost:1313/categories/picoctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Picker IV</title>
      <link>//localhost:1313/post/picoctf2/</link>
      <pubDate>Thu, 24 Oct 2024 12:52:41 +0300</pubDate>
      
      <guid>//localhost:1313/post/picoctf2/</guid>
      <description>&lt;h3 id=&#34;level-description&#34;&gt;Level Description&lt;/h3&gt;
&lt;p&gt;Can you figure out how this program works to get the flag? Connect to the program with netcat: $ nc saturn.picoctf.net 58238&lt;br&gt;
The program&amp;rsquo;s source code can be downloaded &lt;strong&gt;here&lt;/strong&gt;. The binary can be downloaded &lt;strong&gt;here&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;doc&#34;&gt;Doc&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://primer.picoctf.org/&#34;&gt;Primer&lt;/a&gt;&lt;br&gt;
A very usefull tool for solving Pico challanges is the primer where you can find docs for basically all the chapters explored on the site.&lt;br&gt;
&lt;a href=&#34;https://www.sourceware.org/gdb/&#34;&gt;What is GDB?&lt;/a&gt;&lt;br&gt;
GDB, the GNU Project debugger, allows you to see what is going on `inside&amp;rsquo; another program while it executes &amp;ndash; or what another program was doing at the moment it crashed.&lt;/p&gt;
&lt;p&gt;GDB can do four main kinds of things (plus other things in support of these) to help you catch bugs in the act:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start your program, specifying anything that might affect its behavior.&lt;/li&gt;
&lt;li&gt;Make your program stop on specified conditions.&lt;/li&gt;
&lt;li&gt;Examine what has happened, when your program has stopped.&lt;/li&gt;
&lt;li&gt;Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;There is given a c source code and a binary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;


void print_segf_message(){
  printf(&amp;#34;Segfault triggered! Exiting.\n&amp;#34;);
  sleep(15);
  exit(SIGSEGV);
}

int win() {
  FILE *fptr;
  char c;

  printf(&amp;#34;You won!\n&amp;#34;);
  // Open file
  fptr = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
  if (fptr == NULL)
  {
      printf(&amp;#34;Cannot open file.\n&amp;#34;);
      exit(0);
  }

  // Read contents from file
  c = fgetc(fptr);
  while (c != EOF)
  {
      printf (&amp;#34;%c&amp;#34;, c);
      c = fgetc(fptr);
  }

  printf(&amp;#34;\n&amp;#34;);
  fclose(fptr);
}

int main() {
  signal(SIGSEGV, print_segf_message);
  setvbuf(stdout, NULL, _IONBF, 0); // _IONBF = Unbuffered

  unsigned int val;
  printf(&amp;#34;Enter the address in hex to jump to, excluding &amp;#39;0x&amp;#39;: &amp;#34;);
  scanf(&amp;#34;%x&amp;#34;, &amp;amp;val);
  printf(&amp;#34;You input 0x%x\n&amp;#34;, val);

  void (*foo)(void) = (void (*)())val;
  foo();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;netcat&lt;/strong&gt; into the instance in order to see what we can input.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nc :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;01:03:13 archie@Archie ~ →  nc saturn.picoctf.net 56876
Enter the address in hex to jump to, excluding &amp;#39;0x&amp;#39;: 1
You input 0x1
Segfault triggered! Exiting.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The goal seems to be inputting the adress of the function &lt;strong&gt;win&lt;/strong&gt; in order for it to spit out the solution. Even tho gbd is installed on pico instances by default, you have access to the binary so further analysis can be done locally.&lt;br&gt;
We use &lt;strong&gt;info functions&lt;/strong&gt; on the binary in gbdto see the attached adresses to the functions.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;01:05:00 archie@Archie ~ → gdb Downloads/picker-IV
GNU gdb (GDB) 15.2
Copyright (C) 2024 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type &amp;#34;show copying&amp;#34; and &amp;#34;show warranty&amp;#34; for details.
This GDB was configured as &amp;#34;x86_64-pc-linux-gnu&amp;#34;.
Type &amp;#34;show configuration&amp;#34; for configuration details.
For bug reporting instructions, please see:
&amp;lt;https://www.gnu.org/software/gdb/bugs/&amp;gt;.
Find the GDB manual and other documentation resources online at:
    &amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.

For help, type &amp;#34;help&amp;#34;.
Type &amp;#34;apropos word&amp;#34; to search for commands related to &amp;#34;word&amp;#34;...
Reading symbols from Downloads/picker-IV...

This GDB supports auto-downloading debuginfo from the following URLs:
  &amp;lt;https://debuginfod.archlinux.org&amp;gt;
Enable debuginfod for this session? (y or [n]) y
Debuginfod has been enabled.
To make this setting permanent, add &amp;#39;set debuginfod enabled on&amp;#39; to .gdbinit.
(No debugging symbols found in Downloads/picker-IV)
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x00000000004010e0  putchar@plt
0x00000000004010f0  puts@plt
0x0000000000401100  fclose@plt
0x0000000000401110  printf@plt
0x0000000000401120  fgetc@plt
0x0000000000401130  signal@plt
0x0000000000401140  setvbuf@plt
0x0000000000401150  fopen@plt
0x0000000000401160  __isoc99_scanf@plt
0x0000000000401170  exit@plt
0x0000000000401180  sleep@plt
0x0000000000401190  _start
0x00000000004011c0  _dl_relocate_static_pie
0x00000000004011d0  deregister_tm_clones
0x0000000000401200  register_tm_clones
0x0000000000401240  __do_global_dtors_aux
0x0000000000401270  frame_dummy
0x0000000000401276  print_segf_message
0x000000000040129e  win
0x0000000000401334  main
0x00000000004013d0  __libc_csu_init
0x0000000000401440  __libc_csu_fini
0x0000000000401448  _fini
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now simply put that adress into netcat and get the flag.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;01:10:14 archie@Archie ~ → nc saturn.picoctf.net 62038
Enter the address in hex to jump to, excluding &amp;#39;0x&amp;#39;: 000000000040129e
You input 0x40129e
You won!
picoCTF{n3v3r_jump_t0_u53r_5uppl13d_4ddr35535_b8de1af4}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Custom Encryption</title>
      <link>//localhost:1313/post/picoctf1/</link>
      <pubDate>Thu, 24 Oct 2024 10:51:20 +0300</pubDate>
      
      <guid>//localhost:1313/post/picoctf1/</guid>
      <description>&lt;h3 id=&#34;level-description&#34;&gt;Level Description&lt;/h3&gt;
&lt;p&gt;Can you get sense of this code file and write the function that will decode the given encrypted file content. Find the encrypted file here flag_info and code file might be good to analyze and get the flag.&lt;/p&gt;
&lt;h3 id=&#34;given-data&#34;&gt;Given Data&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;enc_flag :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = 94
b = 21
cipher is: [131553, 993956, 964722, 1359381, 43851, 1169360, 950105, 321574, 1081658, 613914, 0, 1213211, 306957, 73085, 993956, 0, 321574, 1257062, 14617, 906254, 350808, 394659, 87702, 87702, 248489, 87702, 380042, 745467, 467744, 716233, 380042, 102319, 175404, 248489]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;custom_encryption.py :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from random import randint
import sys


def generator(g, x, p):
    return pow(g, x) % p


def encrypt(plaintext, key):
    cipher = []
    for char in plaintext:
        cipher.append(((ord(char) * key*311)))
    return cipher


def is_prime(p):
    v = 0
    for i in range(2, p + 1):
        if p % i == 0:
            v = v + 1
    if v &amp;gt; 1:
        return False
    else:
        return True


def dynamic_xor_encrypt(plaintext, text_key):
    cipher_text = &amp;#34;&amp;#34;
    key_length = len(text_key)
    for i, char in enumerate(plaintext[::-1]):
        key_char = text_key[i % key_length]
        encrypted_char = chr(ord(char) ^ ord(key_char))
        cipher_text += encrypted_char
    return cipher_text


def test(plain_text, text_key):
    p = 97
    g = 31
    if not is_prime(p) and not is_prime(g):
        print(&amp;#34;Enter prime numbers&amp;#34;)
        return
    a = randint(p-10, p)
    b = randint(g-10, g)
    print(f&amp;#34;a = {a}&amp;#34;)
    print(f&amp;#34;b = {b}&amp;#34;)
    u = generator(g, a, p)
    v = generator(g, b, p)
    key = generator(v, a, p)
    b_key = generator(u, b, p)
    shared_key = None
    if key == b_key:
        shared_key = key
    else:
        print(&amp;#34;Invalid key&amp;#34;)
        return
    semi_cipher = dynamic_xor_encrypt(plain_text, text_key)
    cipher = encrypt(semi_cipher, shared_key)
    print(f&amp;#39;cipher is: {cipher}&amp;#39;)


if __name__ == &amp;#34;__main__&amp;#34;:
    message = sys.argv[1]
    test(message, &amp;#34;trudeau&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;solution-&#34;&gt;Solution :&lt;/h3&gt;
&lt;p&gt;After looking for way to long at the code and worrying about the fact that some of the values were randomly generated and didn`t know how I could reverse engineer that, I &lt;strong&gt;catted&lt;/strong&gt; enc_flag and saw that I have the actual values used for the specific given encryption. The process from now on is pretty straight forward, we just need to define what we know, reverse each function and call the sequence for the given output.&lt;/p&gt;
&lt;h4 id=&#34;what-do-we-know&#34;&gt;What do we know?&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# given cipher
cipher = [131553, 993956, 964722, 1359381, 43851, 1169360, 950105, 321574, 1081658, 613914, 0, 1213211, 306957, 73085, 993956, 0, 321574, 1257062, 14617, 906254, 350808, 394659, 87702, 87702, 248489, 87702, 380042, 745467, 467744, 716233, 380042, 102319, 175404, 248489]
# values
p = 97
g = 31
a = 94
b = 21
#generator function which we can reuse cause it doesn`t really matter the logic all that much
def generator(g, x, p):
    return pow(g, x) % p
#text_key
text_key=&amp;#34;trudeau&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Encrypt function :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def encrypt(plaintext, key):
    cipher = []
    for char in plaintext:
        cipher.append(((ord(char) * key*311)))
    return cipher
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Decrypt function :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def decrypt(given_str, key):
    plaintext = &amp;#34;&amp;#34;
    for val in given_str:
        val = val // (key * 311)
        plaintext += chr(decrypted_value)  # just the reverse of ord(char)*key*311
    return plaintext
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Dynamic XOR encrypt :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def dynamic_xor_encrypt(plaintext, text_key):
    cipher_text = &amp;#34;&amp;#34;
    key_length = len(text_key)
    for i, char in enumerate(plaintext[::-1]):
        key_char = text_key[i % key_length]
        encrypted_char = chr(ord(char) ^ ord(key_char))
        cipher_text += encrypted_char
    return cipher_text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Dynamic XOR decrypt :&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def dynamic_xor_decrypt(plaintext, text_key):
    # Initialize an empty string to hold the cipher text after each round of XOR
    cipher_text = &amp;#34;&amp;#34;
    # Calculate the length of the key to loop through it in a cyclical manner
    key_length = len(text_key)

    # First round of XOR decryption (reverse the string and XOR each character with the corresponding key character)
    for i, char in enumerate(plaintext[::-1]):  # Enumerate over the reversed plaintext
        key_char = text_key[i % key_length]     # Cycle through the key using modulus
        encrypted_char = chr(ord(char) ^ ord(key_char))  # XOR the ASCII values of the current char and key char
        cipher_text += encrypted_char           # Append the decrypted character to the result

    # Update plaintext to be the newly decrypted text from the first round
    plaintext = cipher_text
    # Reset cipher_text for the next round of decryption
    cipher_text = &amp;#34;&amp;#34;

    # Second round of XOR decryption (same process, but using the result from the first round)
    for i, char in enumerate(plaintext[::-1]):  # Reversing the text again
        key_char = text_key[i % key_length]     # Cycle through the key again
        encrypted_char = chr(ord(char) ^ ord(key_char))  # Perform XOR decryption again
        cipher_text += encrypted_char           # Append the decrypted character

    # Update plaintext to be the newly decrypted text from the second round
    plaintext = cipher_text
    # Reset cipher_text for the third and final round
    cipher_text = &amp;#34;&amp;#34;

    # Third round of XOR decryption (repeat the same process)
    for i, char in enumerate(plaintext[::-1]):  # Reverse again
        key_char = text_key[i % key_length]     # Cycle through the key
        encrypted_char = chr(ord(char) ^ ord(key_char))  # XOR decryption
        cipher_text += encrypted_char           # Append the decrypted character

    # Return the final decrypted result after three rounds of XOR decryption
    return cipher_text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now all there`s left to do is calling the test function with the reversed functions and given values and watch the output.&lt;/p&gt;
&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;11:16:49 archie@Archie pico → python3 decrypt.py
picoCTF{custom_d2cr0pt6d_8b41f976}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>